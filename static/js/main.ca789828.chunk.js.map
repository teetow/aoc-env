{"version":3,"sources":["ui/Blurb.tsx","ui/Debugger.tsx","lib/utils.ts","data/2021/input/day01.ts","data/2021/input/day01test.ts","data/2021/day01.ts","data/2021/input/day02.ts","data/2021/input/day02test.ts","data/2021/day02.ts","data/2021/input/day03.ts","data/2021/input/day03test.ts","data/2021/day03.ts","data/2021/input/day04.ts","data/2021/input/day04test.ts","data/2021/day04.ts","data/2021/input/day05.ts","data/2021/input/day05test.ts","data/2021/day05.ts","data/2021/input/day06.ts","data/2021/input/day06test.ts","data/2021/day06.ts","data/2021/input/day07.ts","data/2021/input/day07test.ts","data/2021/day07.ts","data/2021/input/day08.ts","data/2021/input/day08test.ts","data/2021/day08.ts","data/2021/input/day09.ts","data/2021/input/day09test.ts","data/2021/day09.ts","data/2021/input/day10.ts","data/2021/input/day10test.ts","data/2021/day10.ts","data/2021/day11.ts","data/index.ts","data/2021/index.ts","data/2021/input/day11test.ts","ui/Picker.tsx","ui/Runner.tsx","App.tsx","index.tsx"],"names":["Blurb","className","href","Debugger","useState","msg","setMsg","appendLog","useCallback","line","prev","JSON","stringify","useEffect","console","log","range","n","start","Array","from","keys","map","k","step","to","arr","Math","abs","key","min","reverse","HOUR","formatTime","time","ts","h","floor","m","s","ms","timestamp","sub","src","subtractions","reduce","acc","val","filter","x","includes","intersect","intersections","length","i","deepCopy","obj","parse","initArray","dimensions","dim","splice","fill","colorString","c","data","split","Number","trim","part1","cur","part2","cohorts","day01","desc","parts","tests","testData","runner","result","solutions","moves","forward","up","down","dir","dist","coords","move","xpos","ypos","aim","day","str2bin","value","getBitParity","number","len","pivot","column","join","hasBitSet","bitIndex","bitValue","bitsAtOffset","findOxygenValue","forEach","currentBit","bitOffset","filterBits","findScrubberValue","blocks","numbers","boards","board","row","marked","countHits","hasBingo","hasBingoRow","some","col","pivotBoard","calcScore","flat","cell","updateBoard","num","found","findIndex","score","numBoards","nums","winners","currentNum","push","winningNum","record","worstBoard","fromX","fromY","y","safeDelta","one","other","plotMoves","max","xStep","yStep","pt","hash","plot","straights","Object","values","paths","getHistogram","histogram","fish","simulate","maxDays","births","target","calcDist","sort","a","b","calcDistFactorial","avg","round","chars2nums","pattern","char","toUpperCase","charCodeAt","input","output","pair","batch","seg","SegMasks","0","1","2","3","4","5","6","7","8","9","getOutputDigits","cipher","sequence","segments","mask","indexOf","applyCipher","digits","d","find","len6","_abfg","_bg","len5","_adg","_g","_b","_d","_a","_f","_c","decipher","Pt","isSamePos","isEqual","this","getNeighbors","pos","w","findLowPoints","low_x","every","isLowPoint","getHighNeighbors","highNeighbors","array","item","dedupe","lowPoint","slice","basin","wrognScores","openers","closers","countScore","chunk","stack","wrognScore","pop","fold","replace","foldAll","getCompletionString","missingScores","countMissing","scores","comment","clear","years","2021","day02","day03","day04","day05","day06","day07","day08","day09","10","day10","11","boom","totalFlashes","visualize","doStep","Picker","year","getClasses","refVal","classNames","index","execRunner","TestBox","id","expected","isCorrect","classes","classnames","undefined","Box","runTime","children","Runner","results","setResults","run","type","state","startTime","Date","now","endTime","then","part","partIndex","test","testIndex","solution","solutionIndex","resultSet","entries","rs","startsWith","AppMain","params","useParams","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca789828.chunk.js","sourcesContent":["import \"./Blurb.scss\";\n\nconst Blurb = () => {\n  return (\n    <div className=\"ae-blurb\">\n      <div className=\"ae-blurb__box\">\n        Made by <a href=\"https://github.com/teetow\">Teetow</a> <br />\n        for <a href=\"https://adventofcode.com/\">Advent of Code 2021</a>\n      </div>\n      <div className=\"ae-blurb__box\">\n        <a href=\"https://github.com/teetow/aoc-env/\">GitHub</a>\n      </div>\n      <div className=\"ae-blurb__box\">\n        <a href=\"https://soundcloud.com/teetow\">{`My SoundCloud =)`}</a>\n      </div>\n    </div>\n  );\n};\n\nexport default Blurb;\n","import { useCallback, useEffect, useState } from \"react\";\n\nlet handleLogMsg = (msg: string) => {};\n\nexport let logMsg = (msg: any) => {\n  console.log(msg);\n  handleLogMsg(msg);\n};\n\nconst Debugger = () => {\n  const [msg, setMsg] = useState(\"\");\n\n  const appendLog = useCallback((line) => {\n    setMsg((prev) => prev + \"\\n\" + JSON.stringify(line, null, 2));\n  }, []);\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    handleLogMsg = appendLog;\n    console.log(\"registering\");\n  }, [appendLog]);\n\n  return <code className=\"ae-debugger\">{msg}</code>;\n};\n\nexport default Debugger;\n","export const range = (n: number, start: number = 0) => [\r\n  ...Array.from(Array(n).keys()).map((k) => k + start),\r\n];\r\n\r\nexport const step = (from: number, to: number) => {\r\n  if (from === to) return [from];\r\n\r\n  const arr = Array.from(Array(Math.abs(to - from) + 1).keys()).map(\r\n    (key) => key + Math.min(from, to)\r\n  );\r\n\r\n  return to > from ? arr : arr.reverse();\r\n};\r\n\r\nexport const clamp = (n: number, min = 0, max = 1) =>\r\n  Math.max(Math.min(n, max), min);\r\n\r\nconst HOUR = 1000 * 60 * 60;\r\nconst MINUTE = 1000 * 60;\r\n\r\nexport const timestamp = (time: number) => {\r\n  let ts = time;\r\n  const h = Math.floor(ts / HOUR);\r\n  ts -= h;\r\n  const m = Math.floor(ts / MINUTE);\r\n  ts -= m;\r\n  const s = Math.floor(ts / 1000);\r\n  ts -= s;\r\n  return { h, m, s, ms: ts };\r\n};\r\n\r\nexport const formatTime = (time: number) => {\r\n  const ts = timestamp(time);\r\n  if (time >= HOUR) {\r\n    return `${ts.h}h ${ts.m}m ${ts.s}.${ts.ms}s`;\r\n  }\r\n  if (time >= MINUTE) {\r\n    return `${ts.m}m ${ts.s}.${ts.ms}s`;\r\n  }\r\n  if (time >= 1000) {\r\n    return `${ts.s}.${ts.ms}s`;\r\n  }\r\n  return `${ts.ms}ms`;\r\n};\r\n\r\nexport const median = (nums: number[]) => {\r\n  return nums.sort((a, b) => a - b)[Math.floor(nums.length / 2)];\r\n};\r\n\r\nexport const average = (nums: number[]) => {\r\n  return nums.reduce((acc, val) => acc + val, 0) / nums.length;\r\n};\r\n\r\nexport const factorial = (number: number) =>\r\n  range(number, 1).reduce((acc, val) => acc + val, 0);\r\n\r\nexport const sub = (src: number[], ...subtractions: number[][]) =>\r\n  subtractions.reduce((acc, val) => {\r\n    return acc.filter((x) => !val.includes(x));\r\n  }, src);\r\n\r\nexport const exclude = (...exclusions: number[][]) =>\r\n  range(exclusions.length).reduceRight((acc, i) => {\r\n    return exclusions[i].filter((x) => !acc.includes(x));\r\n  }, [] as number[]);\r\n\r\nexport const intersect = (...intersections: number[][]) =>\r\n  range(intersections.length).reduce(\r\n    (acc, i) => intersections[i].filter((x) => acc.includes(x)),\r\n    intersections[0]\r\n  );\r\n\r\nexport const merge = (...arrays: number[][]) =>\r\n  arrays.reduce((acc, arr) => [...acc, ...sub(arr, acc)], [] as number[]);\r\n\r\nexport const deepCopy = (obj: any) => JSON.parse(JSON.stringify(obj));\r\n\r\nexport const initArray: any = (...dimensions: number[]) => {\r\n  const dim = dimensions.splice(0, 1)[0];\r\n  if (dimensions.length > 0) {\r\n    return Array(dim).fill(initArray(...dimensions));\r\n  }\r\n  return Array(dim).fill(0);\r\n};\r\n\r\nexport const colorString = (s: string | number, c = 33) => {\r\n  return `\\u001b[${c}m${s}\\u001b[${34}m`;\r\n};\r\n","const data = `169\n150\n158\n163\n167\n151\n152\n153\n154\n159\n168\n176\n182\n183\n188\n182\n183\n184\n185\n195\n199\n198\n196\n211\n212\n202\n203\n208\n205\n204\n205\n226\n208\n191\n193\n195\n199\n200\n198\n200\n199\n214\n241\n247\n242\n238\n227\n228\n236\n238\n242\n246\n248\n236\n243\n259\n261\n262\n265\n264\n273\n277\n279\n275\n279\n295\n290\n296\n288\n285\n297\n296\n311\n321\n346\n351\n361\n391\n395\n401\n397\n410\n415\n417\n422\n400\n396\n425\n421\n426\n427\n429\n430\n462\n461\n462\n467\n475\n479\n481\n483\n487\n494\n496\n511\n510\n511\n514\n524\n530\n532\n522\n505\n516\n502\n489\n488\n501\n503\n479\n500\n503\n507\n514\n522\n532\n533\n535\n540\n541\n545\n530\n526\n520\n521\n522\n530\n525\n511\n525\n528\n525\n528\n530\n534\n536\n563\n565\n577\n578\n586\n596\n598\n601\n593\n618\n619\n615\n612\n621\n623\n619\n622\n623\n618\n634\n640\n647\n639\n662\n679\n680\n673\n676\n664\n653\n652\n653\n656\n671\n674\n682\n684\n688\n689\n691\n687\n695\n692\n701\n699\n700\n704\n708\n706\n734\n733\n732\n722\n734\n733\n739\n738\n757\n743\n747\n759\n755\n754\n767\n774\n772\n771\n789\n803\n819\n821\n831\n827\n830\n833\n836\n808\n806\n809\n827\n834\n844\n873\n883\n875\n874\n875\n876\n874\n875\n864\n861\n863\n866\n878\n840\n851\n862\n880\n881\n882\n894\n893\n905\n902\n912\n927\n922\n900\n920\n909\n910\n909\n907\n908\n912\n942\n941\n944\n945\n939\n961\n965\n933\n935\n934\n933\n912\n913\n914\n919\n926\n920\n931\n932\n933\n920\n922\n921\n920\n919\n920\n923\n932\n930\n918\n914\n908\n923\n938\n952\n946\n951\n953\n952\n957\n966\n964\n963\n961\n962\n961\n991\n995\n1015\n1013\n1025\n1023\n1019\n1021\n1041\n1048\n1053\n1047\n1061\n1060\n1088\n1092\n1096\n1098\n1116\n1085\n1082\n1069\n1068\n1069\n1067\n1072\n1077\n1093\n1084\n1102\n1093\n1099\n1082\n1097\n1096\n1101\n1088\n1089\n1077\n1058\n1068\n1071\n1072\n1083\n1074\n1087\n1094\n1093\n1094\n1095\n1099\n1100\n1102\n1104\n1107\n1102\n1104\n1093\n1104\n1101\n1115\n1122\n1121\n1098\n1097\n1094\n1124\n1123\n1120\n1118\n1123\n1125\n1097\n1098\n1101\n1072\n1068\n1067\n1093\n1095\n1100\n1108\n1097\n1115\n1125\n1126\n1128\n1151\n1152\n1151\n1150\n1163\n1162\n1159\n1162\n1158\n1162\n1153\n1145\n1144\n1155\n1165\n1156\n1161\n1151\n1152\n1149\n1150\n1152\n1153\n1157\n1148\n1147\n1140\n1151\n1157\n1154\n1153\n1166\n1163\n1173\n1174\n1173\n1198\n1199\n1208\n1212\n1213\n1200\n1213\n1215\n1214\n1216\n1232\n1205\n1215\n1216\n1241\n1240\n1238\n1244\n1250\n1244\n1246\n1256\n1264\n1263\n1265\n1260\n1259\n1269\n1258\n1262\n1259\n1260\n1263\n1234\n1240\n1242\n1246\n1245\n1227\n1228\n1229\n1210\n1213\n1214\n1216\n1213\n1200\n1206\n1220\n1219\n1189\n1193\n1184\n1183\n1179\n1184\n1189\n1175\n1176\n1177\n1186\n1187\n1192\n1199\n1227\n1225\n1226\n1232\n1233\n1232\n1239\n1256\n1251\n1267\n1273\n1263\n1260\n1241\n1257\n1258\n1260\n1259\n1268\n1296\n1294\n1302\n1304\n1297\n1289\n1294\n1291\n1261\n1257\n1260\n1268\n1275\n1295\n1301\n1306\n1307\n1311\n1310\n1298\n1305\n1306\n1305\n1296\n1282\n1285\n1304\n1306\n1309\n1307\n1313\n1318\n1315\n1318\n1314\n1307\n1306\n1285\n1287\n1288\n1289\n1290\n1291\n1292\n1293\n1295\n1305\n1321\n1320\n1305\n1299\n1301\n1309\n1316\n1327\n1325\n1327\n1333\n1318\n1338\n1341\n1338\n1355\n1351\n1347\n1345\n1348\n1361\n1368\n1364\n1355\n1351\n1339\n1338\n1341\n1346\n1343\n1342\n1343\n1342\n1339\n1341\n1342\n1352\n1382\n1386\n1397\n1399\n1376\n1378\n1379\n1380\n1382\n1359\n1356\n1372\n1385\n1380\n1375\n1373\n1371\n1376\n1363\n1369\n1372\n1370\n1388\n1389\n1393\n1386\n1380\n1382\n1387\n1398\n1402\n1409\n1415\n1419\n1429\n1445\n1425\n1434\n1432\n1433\n1432\n1433\n1465\n1466\n1460\n1473\n1470\n1475\n1476\n1483\n1480\n1467\n1463\n1468\n1466\n1467\n1466\n1467\n1459\n1461\n1485\n1487\n1488\n1490\n1462\n1477\n1481\n1491\n1506\n1505\n1506\n1518\n1517\n1523\n1531\n1515\n1505\n1506\n1504\n1507\n1513\n1529\n1533\n1538\n1535\n1565\n1566\n1577\n1578\n1601\n1598\n1597\n1585\n1580\n1581\n1574\n1577\n1573\n1608\n1609\n1612\n1621\n1629\n1630\n1636\n1645\n1649\n1664\n1668\n1674\n1676\n1675\n1674\n1666\n1668\n1671\n1690\n1704\n1698\n1702\n1703\n1715\n1689\n1686\n1680\n1683\n1697\n1696\n1689\n1688\n1694\n1693\n1694\n1715\n1714\n1718\n1717\n1713\n1711\n1712\n1748\n1749\n1757\n1756\n1758\n1763\n1762\n1760\n1762\n1744\n1730\n1723\n1736\n1733\n1757\n1745\n1752\n1748\n1755\n1754\n1761\n1753\n1741\n1740\n1739\n1759\n1747\n1748\n1758\n1770\n1768\n1783\n1776\n1760\n1747\n1754\n1753\n1765\n1767\n1757\n1756\n1758\n1757\n1760\n1769\n1767\n1769\n1782\n1786\n1799\n1796\n1793\n1797\n1808\n1811\n1805\n1804\n1797\n1801\n1791\n1796\n1791\n1795\n1792\n1793\n1822\n1827\n1823\n1839\n1831\n1847\n1851\n1852\n1857\n1846\n1850\n1841\n1842\n1845\n1846\n1847\n1846\n1848\n1849\n1852\n1851\n1852\n1850\n1849\n1850\n1849\n1848\n1864\n1879\n1889\n1900\n1915\n1905\n1899\n1900\n1916\n1917\n1916\n1893\n1914\n1927\n1926\n1923\n1926\n1939\n1936\n1915\n1926\n1942\n1943\n1944\n1935\n1934\n1936\n1937\n1936\n1932\n1936\n1943\n1954\n1953\n1958\n1951\n1959\n1958\n1957\n1958\n1959\n1957\n1963\n1973\n1976\n1991\n1995\n2023\n2027\n2034\n2037\n2039\n2040\n2024\n2033\n2034\n2027\n2029\n2046\n2069\n2071\n2078\n2083\n2082\n2093\n2092\n2096\n2075\n2041\n2038\n2062\n2059\n2060\n2061\n2070\n2084\n2079\n2071\n2069\n2059\n2061\n2062\n2065\n2064\n2080\n2081\n2089\n2074\n2075\n2076\n2089\n2093\n2085\n2086\n2080\n2065\n2093\n2102\n2101\n2097\n2109\n2113\n2121\n2122\n2121\n2120\n2147\n2144\n2152\n2145\n2146\n2171\n2159\n2160\n2162\n2166\n2162\n2164\n2158\n2156\n2157\n2159\n2177\n2183\n2174\n2173\n2176\n2179\n2172\n2171\n2154\n2177\n2141\n2142\n2156\n2142\n2145\n2137\n2138\n2151\n2155\n2156\n2155\n2140\n2145\n2120\n2108\n2117\n2124\n2133\n2138\n2137\n2105\n2067\n2077\n2074\n2068\n2071\n2072\n2068\n2069\n2077\n2072\n2075\n2083\n2114\n2116\n2113\n2112\n2131\n2124\n2130\n2129\n2130\n2134\n2136\n2135\n2142\n2171\n2127\n2129\n2140\n2149\n2162\n2161\n2165\n2140\n2168\n2170\n2171\n2177\n2193\n2195\n2200\n2207\n2209\n2210\n2216\n2214\n2217\n2214\n2226\n2235\n2238\n2240\n2245\n2246\n2248\n2258\n2291\n2293\n2295\n2294\n2276\n2307\n2308\n2327\n2328\n2307\n2305\n2306\n2312\n2313\n2322\n2320\n2338\n2354\n2359\n2361\n2362\n2365\n2362\n2350\n2349\n2348\n2341\n2345\n2341\n2338\n2315\n2313\n2316\n2324\n2322\n2325\n2331\n2327\n2333\n2335\n2334\n2335\n2321\n2307\n2305\n2292\n2261\n2262\n2265\n2310\n2311\n2331\n2325\n2316\n2319\n2325\n2331\n2328\n2327\n2340\n2302\n2306\n2307\n2308\n2310\n2311\n2337\n2336\n2321\n2318\n2319\n2311\n2312\n2325\n2326\n2327\n2325\n2317\n2327\n2315\n2314\n2317\n2340\n2341\n2343\n2345\n2343\n2339\n2337\n2339\n2350\n2329\n2331\n2348\n2349\n2357\n2350\n2343\n2339\n2340\n2342\n2329\n2328\n2340\n2332\n2331\n2315\n2321\n2320\n2319\n2321\n2322\n2312\n2313\n2328\n2347\n2346\n2347\n2337\n2341\n2338\n2343\n2342\n2332\n2335\n2343\n2365\n2362\n2364\n2352\n2353\n2354\n2346\n2348\n2351\n2352\n2355\n2350\n2351\n2339\n2360\n2365\n2364\n2366\n2369\n2368\n2366\n2372\n2362\n2370\n2371\n2370\n2371\n2377\n2376\n2381\n2380\n2379\n2362\n2355\n2370\n2376\n2372\n2364\n2363\n2360\n2356\n2348\n2338\n2340\n2341\n2349\n2346\n2339\n2338\n2330\n2333\n2328\n2316\n2314\n2324\n2338\n2341\n2318\n2321\n2346\n2347\n2317\n2321\n2315\n2324\n2326\n2333\n2347\n2348\n2333\n2345\n2352\n2353\n2352\n2355\n2358\n2359\n2367\n2369\n2375\n2365\n2358\n2371\n2374\n2386\n2416\n2418\n2416\n2408\n2409\n2442\n2443\n2446\n2453\n2444\n2490\n2493\n2498\n2493\n2488\n2494\n2495\n2506\n2505\n2508\n2513\n2509\n2502\n2500\n2498\n2515\n2513\n2514\n2513\n2524\n2525\n2534\n2530\n2547\n2530\n2524\n2527\n2523\n2522\n2526\n2528\n2527\n2528\n2547\n2530\n2527\n2530\n2528\n2511\n2493\n2520\n2512\n2490\n2482\n2476\n2456\n2455\n2451\n2452\n2435\n2436\n2425\n2426\n2430\n2441\n2445\n2438\n2445\n2440\n2446\n2445\n2446\n2434\n2433\n2414\n2435\n2434\n2432\n2415\n2384\n2386\n2387\n2400\n2402\n2392\n2388\n2394\n2396\n2377\n2354\n2358\n2370\n2371\n2367\n2368\n2382\n2381\n2385\n2395\n2381\n2356\n2332\n2334\n2348\n2355\n2354\n2371\n2367\n2365\n2374\n2372\n2371\n2374\n2371\n2363\n2375\n2376\n2377\n2418\n2436\n2451\n2435\n2424\n2427\n2459\n2474\n2471\n2469\n2475\n2486\n2491\n2493\n2486\n2472\n2474\n2475\n2472\n2465\n2430\n2442\n2444\n2442\n2443\n2442\n2450\n2451\n2463\n2456\n2445\n2436\n2456\n2464\n2456\n2462\n2463\n2462\n2464\n2468\n2477\n2481\n2482\n2479\n2489\n2494\n2493\n2504\n2505\n2509\n2485\n2484\n2473\n2501\n2512\n2511\n2514\n2511\n2512\n2536\n2543\n2545\n2533\n2535\n2530\n2536\n2544\n2552\n2553\n2557\n2555\n2565\n2561\n2558\n2556\n2555\n2573\n2575\n2576\n2561\n2565\n2566\n2538\n2529\n2530\n2529\n2530\n2538\n2549\n2555\n2556\n2562\n2561\n2562\n2560\n2557\n2576\n2579\n2596\n2598\n2599\n2601\n2612\n2648\n2649\n2648\n2647\n2645\n2642\n2638\n2651\n2658\n2657\n2664\n2663\n2653\n2654\n2662\n2663\n2661\n2660\n2655\n2644\n2645\n2646\n2652\n2663\n2657\n2661\n2655\n2659\n2662\n2675\n2677\n2678\n2688\n2687\n2679\n2678\n2685\n2689\n2691\n2702\n2692\n2691\n2694\n2709\n2712\n2710\n2711\n2709\n2708\n2707\n2711\n2714\n2715\n2729\n2733\n2720\n2723\n2729\n2734\n2698\n2690\n2693\n2688\n2704\n2710\n2717\n2718\n2716\n2730\n2771\n2761\n2777\n2778\n2776\n2777\n2779\n2794\n2795\n2796\n2799\n2807\n2816\n2818\n2819\n2814\n2816\n2824\n2848\n2844\n2838\n2835\n2836\n2849\n2851\n2852\n2856\n2859\n2862\n2863\n2867\n2866\n2878\n2884\n2883\n2892\n2898\n2897\n2896\n2908\n2901\n2886\n2885\n2899\n2897\n2900\n2898\n2894\n2924\n2898\n2903\n2898\n2900\n2909\n2908\n2907\n2895\n2924\n2933\n2916\n2914\n2901\n2895\n2897\n2903\n2907\n2898\n2899\n2905\n2906\n2905\n2906\n2897\n2905\n2909\n2908\n2914\n2915\n2907\n2911\n2919\n2926\n2927\n2953\n2963\n2966\n2967\n2984\n2997\n2996\n3003\n2996\n3007\n3008\n3012\n3029\n3028\n3031\n3029\n3030\n3031\n3003\n2999\n3013\n3005\n2984\n2997\n2996\n2997\n3003\n2990\n2989\n2990\n2993\n2992\n2996\n3005\n3009\n3008\n3026\n3029\n3024\n3035\n3039\n3057\n3058\n3059\n3053\n3063\n3062\n3065\n3069\n3071\n3063\n3064\n3066\n3080\n3079\n3077\n3099\n3098\n3099\n3102\n3105\n3108\n3114\n3102\n3103\n3105\n3075\n3076\n3085\n3086\n3088\n3086\n3078\n3079\n3076\n3070\n3076\n3078\n3091\n3092\n3100\n3103\n3105\n3095\n3101\n3106\n3095\n3098\n3102\n3103\n3104\n3106\n3113\n3112\n3114\n3111\n3128\n3132\n3129\n3127\n3131\n3139\n3142\n3143\n3145\n3152\n3163\n3153\n3150\n3153\n3168\n3165\n3157\n3179\n3178\n3166\n3164\n3165\n3180\n3182\n3180\n3184\n3190\n3191\n3192\n3176\n3189\n3191\n3183\n3185\n3203\n3213\n3212\n3207\n3208\n3205\n3197\n3191\n3192\n3196\n3198\n3215\n3196\n3197\n3173\n3170\n3176\n3194\n3212\n3213\n3214\n3224\n3223\n3230\n3244\n3245\n3249\n3250\n3264\n3263\n3265\n3266\n3263\n3265\n3267\n3279\n3278\n3257\n3255\n3287\n3288\n3313\n3311\n3310\n3308\n3311\n3315\n3327\n3304\n3303\n3324\n3325\n3324\n3325\n3337\n3344\n3341\n3345\n3344\n3343\n3339\n3334\n3332\n3331\n3326\n3325\n3326\n3336\n3332\n3333\n3349\n3348\n3349\n3348\n3349\n3353\n3363\n3362\n3377\n3374\n3378\n3351\n3360\n3379\n3386\n3376\n3368\n3365\n3364\n3379\n3387\n3386\n3393\n3383\n3354\n3359\n3361\n3366\n3368\n3365\n3369\n3388\n3431\n3433\n3432\n3429\n3430\n3431\n3426\n3427\n3431\n3424\n3443\n3441\n3440\n3447\n3458\n3439\n3437\n3436\n3429\n3430\n3440\n3454\n3448\n3463\n3460\n3461\n3462\n3463\n3461\n3482\n3492\n3491\n3492\n3498\n3504\n3487\n3490\n3483\n3484\n3477\n3486\n3481\n3480\n3490\n3498\n3502\n3501\n3480\n3481\n3489\n3488\n3492\n3475\n3485\n3483\n3480\n3481\n3473\n3478\n3466\n3465\n3471\n3482\n3481\n3490\n3501\n3500\n3503\n3497\n3501\n3496\n3472\n3479\n3463\n3454\n3463\n3458\n3436\n3469\n3460\n3461\n3462\n3464\n3454\n3453\n3448\n3449\n3445\n3447\n3449\n3451\n3450\n3464\n3470\n3471\n3472\n3482\n3487\n3489\n3482\n3481\n3496\n3501\n3503\n3498\n3497\n3499\n3527\n3530\n3524\n3504\n3494\n3499\n3497\n3489\n3507\n3512\n3535\n3536\n3525\n3536\n3554\n3535\n3534\n3535\n3537\n3541\n3542\n3541\n3543\n3540\n3542\n3539\n3549\n3547\n3535\n3532\n3539\n3540\n3557\n3558\n3575\n3576\n3586\n3588`;\n\nexport default data;\n","const data = `199\n200\n208\n210\n200\n207\n240\n269\n260\n263`;\n\n\nexport default data;\n","import { Day } from \"../../lib/Day\";\nimport { range } from \"../../lib/utils\";\nimport data from \"./input/day01\";\nimport testData from \"./input/day01test\";\n\nconst parse = (data: string) =>\n  data.split(/[^\\d+]/).map((x) => Number(x.trim()));\n\nconst part1 = (data: number[]) => {\n  return data.reduce((prev, cur, i, arr) => {\n    return cur > arr[i - 1] ? prev + 1 : prev;\n  }, 0);\n};\n\nconst part2 = (data: number[]) => {\n  const cohorts = range(data.length - 2).map((i) => {\n    return data[i] + data[i + 1] + data[i + 2];\n  });\n\n  return part1(cohorts);\n};\n\nconst day01: Day<number[], number> = {\n  desc: \"Submarine goes BRRRRRR\",\n  parts: [\n    {\n      desc: \"Count the number of times a depth measurement increases from the previous measurement.\",\n      tests: [\n        { data: parse(testData), runner: part1, result: 7 },\n      ],\n      solutions: [\n        { data: parse(data), runner: part1 },\n      ],\n    },\n    {\n      desc: \"In running cohorts of 3, count the number of times a depth cohort increases from the previous cohort.\",\n      tests: [\n        { data: parse(testData), runner: part2, result: 5 },\n      ],\n      solutions: [\n        { data: parse(data), runner: part2 },\n      ],\n    },\n  ],\n};\n\nexport default day01;\n","const data = `forward 1\ndown 6\ndown 6\nforward 2\nforward 2\ndown 2\ndown 1\ndown 5\ndown 7\ndown 3\nforward 1\nforward 6\nup 2\nforward 2\nforward 7\nforward 4\ndown 2\nforward 6\nforward 6\ndown 3\nup 7\ndown 6\nforward 2\nup 5\ndown 7\nforward 8\ndown 8\nforward 8\ndown 5\ndown 5\ndown 8\nforward 9\ndown 7\nforward 9\nforward 9\nforward 8\ndown 6\ndown 9\ndown 1\nforward 8\ndown 6\ndown 7\nup 3\nforward 5\ndown 1\ndown 7\nup 8\nforward 6\ndown 2\ndown 9\ndown 9\nforward 1\ndown 2\ndown 9\nforward 1\nforward 3\ndown 6\nup 7\ndown 7\nforward 3\ndown 4\ndown 3\nup 7\nup 7\nforward 2\ndown 7\nforward 2\ndown 3\nup 7\ndown 7\nforward 6\ndown 2\ndown 7\nforward 5\ndown 9\ndown 2\nup 7\ndown 1\nforward 5\ndown 5\nforward 9\ndown 6\ndown 3\ndown 7\ndown 8\ndown 3\nup 4\ndown 6\nforward 6\nup 7\nup 2\nforward 3\nup 1\ndown 5\nforward 9\nup 3\nforward 8\nup 4\ndown 7\ndown 8\ndown 3\ndown 7\nforward 5\nup 6\ndown 4\ndown 8\ndown 8\nforward 7\ndown 5\nforward 3\nforward 1\ndown 1\nforward 1\nup 1\nforward 4\nforward 9\nup 8\ndown 7\ndown 9\ndown 1\ndown 2\ndown 1\ndown 4\nforward 4\nforward 8\nforward 6\nforward 1\nforward 6\nforward 9\ndown 1\nup 9\ndown 9\nforward 2\ndown 6\ndown 8\ndown 6\nup 7\nforward 2\nup 2\nforward 5\ndown 2\nup 2\nup 9\nforward 7\ndown 6\nforward 3\ndown 5\nup 4\ndown 1\ndown 5\ndown 6\nup 7\ndown 3\ndown 9\nup 8\ndown 2\nup 8\ndown 1\ndown 2\ndown 4\nforward 6\nup 7\nup 3\nforward 8\ndown 9\ndown 8\nforward 3\nup 5\nforward 1\ndown 5\nup 2\ndown 5\nup 4\ndown 6\nforward 9\ndown 1\ndown 1\nforward 1\ndown 2\nforward 9\nup 5\ndown 7\nforward 7\ndown 9\ndown 5\ndown 3\nforward 4\ndown 2\nforward 7\nforward 3\nup 4\ndown 9\nforward 9\nforward 3\nforward 1\nforward 6\ndown 1\ndown 5\ndown 3\nforward 9\ndown 2\nforward 9\nup 7\nforward 7\nforward 7\nforward 8\nforward 6\nforward 5\ndown 7\nup 4\nforward 7\nup 2\nforward 6\ndown 2\ndown 9\ndown 3\nforward 5\ndown 3\ndown 9\nforward 2\nup 4\nforward 7\nforward 3\nforward 8\ndown 4\nforward 4\ndown 3\nup 7\nup 1\nup 4\ndown 3\ndown 5\ndown 3\ndown 7\ndown 3\ndown 7\ndown 5\ndown 1\nforward 5\nforward 6\ndown 1\nforward 9\ndown 4\nup 1\nforward 5\nup 6\ndown 4\nup 7\ndown 4\ndown 9\nforward 7\nup 8\nforward 3\nforward 5\ndown 9\ndown 1\ndown 7\nforward 9\ndown 9\ndown 5\nforward 6\nforward 4\nforward 3\ndown 1\ndown 2\nup 4\nup 7\ndown 8\nforward 4\nforward 1\nforward 8\ndown 8\ndown 8\nforward 1\nforward 5\nup 8\nforward 2\ndown 6\nforward 6\ndown 6\nforward 7\ndown 9\ndown 4\nup 4\nup 5\ndown 7\nforward 4\ndown 7\ndown 5\nforward 7\ndown 3\ndown 2\nforward 5\nforward 1\ndown 5\ndown 4\ndown 8\nup 8\nforward 3\ndown 7\ndown 8\ndown 5\nforward 1\ndown 6\nforward 8\nforward 2\nforward 3\ndown 4\nup 3\ndown 4\nforward 3\nforward 9\nup 5\nup 9\ndown 3\nup 4\nforward 4\ndown 9\nforward 8\ndown 2\ndown 2\nforward 9\ndown 5\ndown 2\nup 1\nforward 6\nforward 4\nup 5\nup 3\nup 8\ndown 7\nforward 5\nup 7\nforward 9\ndown 6\ndown 7\nforward 4\ndown 9\nup 2\nforward 8\ndown 1\nforward 6\nforward 1\nforward 4\ndown 9\ndown 6\nup 1\nforward 1\ndown 5\nup 1\nforward 3\ndown 1\ndown 4\nforward 3\ndown 4\nup 9\ndown 6\nup 6\nforward 1\nforward 8\nup 1\ndown 7\nup 8\nup 3\nup 7\ndown 9\nforward 8\ndown 3\nup 2\nforward 3\nup 4\nup 3\ndown 5\nforward 3\nforward 2\ndown 3\nforward 5\nup 4\ndown 9\ndown 8\ndown 3\ndown 5\ndown 7\nforward 2\nforward 8\nup 9\nforward 9\ndown 4\ndown 8\nforward 5\ndown 2\nup 4\ndown 7\nforward 6\nup 9\nforward 6\ndown 9\ndown 5\nforward 9\ndown 5\ndown 3\nup 6\nup 6\ndown 7\nup 1\nforward 7\nforward 4\ndown 5\nforward 8\ndown 5\ndown 8\nforward 4\nforward 8\nforward 1\ndown 7\nforward 4\ndown 6\ndown 4\nup 8\ndown 4\nup 5\nup 7\nup 2\ndown 5\ndown 9\nforward 6\ndown 7\ndown 9\ndown 3\nup 4\ndown 8\nforward 3\nforward 5\nforward 8\ndown 9\nforward 9\ndown 1\nup 1\ndown 9\nforward 3\nup 9\nforward 5\nforward 2\ndown 1\ndown 5\ndown 6\nforward 5\nforward 4\nup 5\nforward 5\nup 4\nup 9\nup 4\nforward 8\ndown 7\ndown 6\ndown 9\ndown 3\ndown 2\ndown 6\nup 6\nforward 6\nup 3\ndown 3\nforward 3\ndown 2\ndown 9\ndown 3\nforward 1\nforward 8\ndown 2\ndown 9\ndown 6\nup 3\ndown 6\nforward 1\nforward 1\nforward 2\ndown 9\ndown 8\nforward 9\ndown 2\nup 3\nforward 2\nup 5\nup 8\ndown 4\nup 3\nforward 3\nforward 5\nforward 1\ndown 5\nup 4\nforward 4\ndown 7\nforward 8\nup 7\nforward 5\ndown 2\nforward 4\nforward 6\ndown 7\ndown 9\nforward 2\nforward 2\ndown 4\ndown 5\nup 5\nforward 5\nforward 2\ndown 8\nforward 6\ndown 1\ndown 6\nforward 1\ndown 8\nup 6\ndown 8\nforward 4\ndown 4\ndown 4\nforward 3\nup 8\ndown 1\nforward 7\ndown 5\nforward 1\ndown 9\ndown 9\ndown 5\nforward 1\ndown 4\nup 6\nforward 4\nforward 5\nforward 1\ndown 4\ndown 2\ndown 5\nforward 6\nforward 1\nforward 6\ndown 2\ndown 6\nforward 3\ndown 9\nup 6\nforward 2\nup 7\nforward 8\ndown 7\nup 1\nforward 1\ndown 8\nforward 8\ndown 9\nforward 4\ndown 4\ndown 5\ndown 8\nup 3\nforward 1\nforward 9\ndown 9\nup 2\ndown 1\ndown 8\ndown 6\nforward 3\ndown 8\ndown 3\nforward 5\nforward 2\nforward 5\nforward 5\nforward 2\nforward 4\ndown 9\ndown 3\nforward 7\nforward 3\nup 3\nup 1\nforward 2\ndown 5\nforward 3\nup 3\nforward 2\nforward 9\nforward 5\ndown 3\nforward 9\nup 2\nforward 7\nup 3\ndown 8\nforward 7\nup 5\nforward 3\nforward 4\nup 5\ndown 6\nup 2\nforward 8\nup 3\ndown 5\ndown 4\nforward 9\nup 2\ndown 5\nforward 4\nup 7\ndown 9\nup 8\ndown 4\nup 5\nforward 4\ndown 8\nforward 3\ndown 5\ndown 5\ndown 8\nup 9\nforward 3\nforward 9\ndown 2\nforward 4\ndown 1\nup 3\ndown 9\nup 6\ndown 1\ndown 1\ndown 5\ndown 1\ndown 7\nforward 4\ndown 4\ndown 9\nup 1\nup 7\nup 2\ndown 8\nup 5\ndown 6\nforward 6\nforward 6\ndown 4\nforward 9\nforward 4\nforward 9\nforward 4\nup 5\nforward 9\nup 7\nup 1\nforward 5\nforward 9\ndown 7\nforward 7\nforward 6\ndown 5\nforward 9\nup 9\ndown 4\ndown 9\ndown 2\nforward 3\ndown 3\ndown 3\nforward 9\ndown 8\ndown 4\ndown 8\ndown 6\ndown 6\ndown 9\nup 5\ndown 3\ndown 4\nup 6\nup 2\nforward 1\nup 9\nup 9\nforward 9\nforward 7\ndown 3\nforward 2\nup 5\ndown 2\nforward 2\nforward 8\ndown 8\nforward 4\nforward 2\nup 3\nup 8\ndown 5\nforward 5\nforward 8\ndown 1\ndown 8\nforward 3\nforward 9\ndown 7\nforward 5\nforward 8\nforward 1\nup 6\nforward 9\nup 5\nforward 8\nforward 3\ndown 2\nup 9\nup 7\nforward 5\ndown 8\ndown 3\nforward 8\ndown 3\ndown 9\ndown 9\nforward 7\ndown 9\nforward 5\nforward 1\nforward 5\ndown 2\ndown 7\nforward 4\ndown 4\nup 8\ndown 2\nup 1\ndown 1\nup 5\nup 6\ndown 5\nup 9\nup 6\ndown 6\ndown 4\ndown 3\nforward 9\nforward 2\nforward 2\nup 6\nforward 9\ndown 3\nforward 4\nforward 6\nforward 8\nforward 2\nforward 8\nforward 4\ndown 1\nforward 3\nup 1\nup 9\nforward 9\nup 6\nup 5\nforward 2\ndown 6\nup 8\nup 9\nforward 3\nforward 9\ndown 7\ndown 6\nforward 2\ndown 7\nforward 4\ndown 5\ndown 2\ndown 6\ndown 2\ndown 5\ndown 3\nforward 3\ndown 7\ndown 6\ndown 5\nup 2\nforward 4\nup 9\nforward 2\nforward 4\ndown 5\nup 9\nup 2\nforward 9\nforward 6\ndown 6\ndown 3\ndown 5\ndown 1\nup 4\nup 1\ndown 4\ndown 1\nforward 5\nforward 3\ndown 7\ndown 9\nforward 2\ndown 3\nup 7\ndown 2\ndown 6\nforward 3\nforward 3\ndown 3\nup 1\nforward 6\nforward 3\ndown 6\ndown 2\nup 4\nup 3\ndown 5\ndown 9\ndown 3\nforward 7\nforward 2\nforward 9\ndown 6\nforward 4\nup 9\nforward 1\ndown 4\ndown 6\ndown 2\nforward 3\ndown 2\nup 8\nforward 1\nforward 9\ndown 9\nup 7\nforward 6\nup 8\ndown 9\ndown 4\nforward 8\ndown 6\ndown 1\ndown 9\ndown 1\nup 7\nforward 9\nup 3\nforward 7\nup 7\ndown 2\nforward 1\ndown 4\ndown 7\nforward 7\nforward 9\ndown 6\ndown 5\ndown 8\ndown 9\nup 3\ndown 7\nup 3\ndown 1\nforward 1\nforward 6\nforward 2\ndown 6\nforward 9\nforward 1\nup 2\nforward 1\nforward 3\nforward 4\nforward 7\nforward 4\ndown 3\nup 8\nforward 9\ndown 7\nforward 6\nforward 3\ndown 6\nforward 4\nup 1\nforward 3\ndown 3\nforward 9\nforward 2\nforward 1\nforward 4\nup 6\nforward 3\ndown 6\ndown 8\nup 4\nforward 8\nforward 4\ndown 8\nup 4\nup 3\nforward 9\nforward 3\ndown 5\nforward 7\nforward 1\nup 8\nup 4\ndown 1\ndown 3\ndown 9\ndown 7\nup 5\nforward 6\ndown 1\nforward 3\ndown 2\ndown 2\ndown 6\nforward 2\ndown 5\nforward 2\nforward 1\nup 9\ndown 1\nforward 3\ndown 3\nforward 6\ndown 1\nforward 5\nforward 7\ndown 6\nforward 7\ndown 4\nup 7\nforward 1\ndown 7\ndown 8\ndown 9\ndown 6\ndown 1\nforward 6\ndown 7\nforward 2\ndown 2\nup 1\nup 2\ndown 3\ndown 4\nup 2\nforward 3\ndown 5\ndown 4\ndown 9\ndown 6\ndown 9\ndown 7\ndown 2\nforward 7\nforward 3\nup 3\ndown 1\ndown 5\ndown 1\ndown 3\ndown 3\nforward 9\ndown 1\ndown 7\nup 4\ndown 1\ndown 6\nup 9\ndown 9\nforward 6\ndown 9\nforward 3\nforward 8\nup 1\nforward 3\ndown 8\nforward 2\ndown 6\ndown 1\nup 7\ndown 1\nforward 3\ndown 2\nforward 1\nup 8\nforward 8\nforward 7\ndown 9\nforward 3`;\n\nexport default data;\n","const data = `forward 5\ndown 5\nforward 8\nup 3\ndown 8\nforward 2`;\nexport default data;\n","import { Day } from \"../../lib/Day\";\nimport { range } from \"../../lib/utils\";\nimport data from \"./input/day02\";\nimport testData from \"./input/day02test\";\n\ntype Dirs = \"forward\" | \"up\" | \"down\";\n\nconst moves: Record<Dirs, number[]> = {\n  forward: [1, 0, 0],\n  up: [0, -1, -1],\n  down: [0, 1, 1],\n};\n\ntype Move = {\n  dir: keyof typeof moves;\n  dist: number;\n};\n\nconst matrixAdd = ([...rest]: number[][]) => {\n  return rest.reduce((prev, cur) =>\n    range(cur.length).map((i) => cur[i] + prev[i])\n  );\n};\n\nconst matrixMult = ([...rest]: number[][]) => {\n  return rest.reduce((prev, cur) =>\n    range(cur.length).map((i) => cur[i] * prev[i])\n  );\n};\n\nconst parse = (data: string) =>\n  data.split(/\\n/).map<Move>((x) => {\n    const [dir, dist] = x.trim().split(\" \");\n    return { dir, dist: Number(dist) } as Move;\n  });\n\nconst part1 = (data: Move[]) => {\n  const coords = data.reduce<number[]>(\n    (prev, cur) => {\n      const move = matrixMult([moves[cur.dir], [cur.dist, cur.dist]]);\n      return matrixAdd([prev, move]);\n    },\n    [0, 0]\n  );\n  return coords[0] * coords[1];\n};\n\nconst part2 = (data: Move[]) => {\n  const coords = data.reduce<number[]>(\n    (prev, cur) => {\n      let [xpos, ypos, aim] = prev;\n\n      if (cur.dir === \"forward\") {\n        xpos += cur.dist;\n        ypos += cur.dist * aim;\n      } else {\n        aim += cur.dir === \"down\" ? cur.dist : -cur.dist;\n      }\n\n      return [xpos, ypos, aim];\n    },\n    [0, 0, 0]\n  );\n  return coords[0] * coords[1];\n};\n\nconst day: Day<Move[], number> = {\n  parts: [\n    {\n      desc: \"What do you get if you multiply your final horizontal position by your final depth?\",\n      tests: [{ data: parse(testData), runner: part1, result: 150 }],\n      solutions: [{ data: parse(data), runner: part1 }],\n    },\n    {\n      desc: \"What do you get if you multiply your final horizontal position by your final depth?\",\n      tests: [{ data: parse(testData), runner: part2, result: 900 }],\n      solutions: [{ data: parse(data), runner: part2 }],\n    },\n  ],\n};\n\nexport default day;\n","const data = `100100110110\r\n101110110110\r\n010100010100\r\n011001110000\r\n000000000111\r\n000010110001\r\n001111000001\r\n100010000001\r\n010100110011\r\n010000010110\r\n010000000011\r\n010101001000\r\n011011101100\r\n011100110111\r\n011011000000\r\n001010010010\r\n011011111010\r\n011110110110\r\n000000100010\r\n111111010101\r\n011100010011\r\n001110110100\r\n110110010100\r\n100000001011\r\n100100010011\r\n011011010001\r\n111000101110\r\n101100001111\r\n110101010101\r\n011010001001\r\n101111011000\r\n011111111011\r\n110000100101\r\n011101101101\r\n011010011001\r\n111100100001\r\n100000010000\r\n111010001010\r\n111110010001\r\n110110001101\r\n000001000001\r\n000101011000\r\n111101100100\r\n110011001001\r\n100010100011\r\n011011100010\r\n011000101101\r\n110101101011\r\n111110101000\r\n010111110100\r\n010010101011\r\n100001001000\r\n101011101011\r\n110111000001\r\n011100011110\r\n011001101101\r\n010100001111\r\n001111011000\r\n100111111010\r\n110110000100\r\n000010101100\r\n111010111011\r\n110110110110\r\n110111011000\r\n100001011001\r\n110010011111\r\n100000000101\r\n110000101100\r\n110100010110\r\n101001101100\r\n111000100011\r\n011001001101\r\n000111100111\r\n001000111110\r\n110100100010\r\n000110011100\r\n010011101111\r\n010101000111\r\n101100100001\r\n100110000010\r\n001110100101\r\n010100100100\r\n001110010110\r\n000010111010\r\n101011101001\r\n101111101010\r\n101011100110\r\n011001111010\r\n100110101010\r\n101111101110\r\n100000100011\r\n000101001011\r\n000110110000\r\n110111101111\r\n111110010110\r\n100010010111\r\n011100000101\r\n101010011010\r\n010111110010\r\n000011111101\r\n000001101000\r\n000111001001\r\n101000001011\r\n011001101000\r\n010110101110\r\n000111101000\r\n101100100011\r\n011010010011\r\n110101111110\r\n101011110001\r\n111000011101\r\n111110011100\r\n100110110001\r\n110111110011\r\n000000011010\r\n000100001110\r\n011100001111\r\n010110010111\r\n011000100110\r\n011000111000\r\n010001000111\r\n100010101110\r\n011001111011\r\n010111100001\r\n011101101110\r\n101100010110\r\n100010101011\r\n110101000010\r\n111010001101\r\n111001100111\r\n101001110111\r\n011000110010\r\n011001111100\r\n010001000110\r\n011011100101\r\n101111010001\r\n100110001011\r\n001011000010\r\n010100011111\r\n101111100110\r\n011100000010\r\n011001000010\r\n010011011111\r\n001101000010\r\n110110010110\r\n001000101001\r\n101100011000\r\n000111000110\r\n000001001101\r\n000100100111\r\n110111011100\r\n010100101001\r\n010101110000\r\n110000001110\r\n010011010000\r\n011101110000\r\n001111100000\r\n010011000011\r\n010011010011\r\n101110010000\r\n101100000110\r\n110011101101\r\n010011111101\r\n101011010110\r\n001011011100\r\n111111011001\r\n011011111000\r\n011101110011\r\n010011001101\r\n100011001000\r\n011010111011\r\n111101000110\r\n100110001101\r\n101001101011\r\n100000111100\r\n111101001011\r\n010111010111\r\n101110000000\r\n010010111111\r\n100010110010\r\n101111110100\r\n111101110111\r\n111111110010\r\n110110001100\r\n101010101111\r\n000110101000\r\n100110110100\r\n100101011010\r\n001001011000\r\n111010001011\r\n000000110100\r\n111000010010\r\n101010011101\r\n010110000010\r\n011111110111\r\n101011111101\r\n011010100111\r\n100011011101\r\n110110011110\r\n101111100111\r\n001100001111\r\n011111101011\r\n100101000100\r\n100101010010\r\n011110111010\r\n010110001001\r\n010101101010\r\n001111000101\r\n010001001100\r\n001010000010\r\n010000001101\r\n110000100110\r\n111100001101\r\n101010001001\r\n110011111111\r\n010111011001\r\n000111101111\r\n111110000011\r\n011111000011\r\n011110011011\r\n100011010100\r\n000011000110\r\n011100101000\r\n010101001111\r\n010110010110\r\n111111000111\r\n101011001001\r\n011100010111\r\n000000001100\r\n011001001000\r\n110101101111\r\n101101011001\r\n000111011000\r\n000010001111\r\n111110011011\r\n010111011111\r\n011101110100\r\n001011100001\r\n001001011100\r\n110100111011\r\n100101011111\r\n000111001101\r\n011110100101\r\n111100011010\r\n111000110100\r\n010001010101\r\n100001000100\r\n000000101110\r\n011011001110\r\n111010100111\r\n100110110000\r\n110110110001\r\n001110001001\r\n110010111111\r\n000111001011\r\n011001011111\r\n000010001011\r\n100010101001\r\n100101100101\r\n010110011001\r\n101101011110\r\n101011100101\r\n101110110101\r\n111001100001\r\n001000101010\r\n101011010011\r\n110011101100\r\n101100001101\r\n101111101001\r\n111100000010\r\n100111000000\r\n010010000100\r\n001001001001\r\n000110111110\r\n011010001110\r\n100011110000\r\n110111101000\r\n110000010101\r\n011011101011\r\n101000010001\r\n110110110010\r\n100000000001\r\n011011010101\r\n000111111101\r\n100001111011\r\n100100000110\r\n001111100010\r\n110010000011\r\n101101111001\r\n110011010110\r\n010001011011\r\n010010011010\r\n001110011110\r\n100111010010\r\n110011011010\r\n111100010011\r\n111011011101\r\n100001010110\r\n101011001111\r\n001001000000\r\n101011100010\r\n010000110011\r\n100111110000\r\n010010101110\r\n110000110011\r\n110100010111\r\n001011110010\r\n101011000111\r\n000101110011\r\n010001111011\r\n000010011011\r\n011000001011\r\n000000100100\r\n001101111001\r\n011000000101\r\n100100001101\r\n101001000011\r\n111100100111\r\n111000111111\r\n011000110011\r\n101011011110\r\n101110000100\r\n010101000001\r\n110111111100\r\n100000011011\r\n101001011010\r\n111011000110\r\n110111101011\r\n011000101100\r\n100001111111\r\n111011100101\r\n110111110101\r\n101011111010\r\n010001101100\r\n111000111001\r\n110001000011\r\n100000110100\r\n010110100010\r\n100011011111\r\n001111111001\r\n101101011011\r\n011101011000\r\n100000111000\r\n101000000110\r\n010110011101\r\n110010101101\r\n011110000010\r\n100011011010\r\n110010110101\r\n110111100011\r\n110100110000\r\n101010011100\r\n001010010110\r\n100110011110\r\n101100100010\r\n110101111001\r\n111110000000\r\n011000111111\r\n100100100000\r\n111111101111\r\n001011110101\r\n101110000001\r\n101111011110\r\n011010111001\r\n011111010111\r\n000111000101\r\n000100010001\r\n111100100101\r\n100110000100\r\n001000001111\r\n001001100100\r\n001000000110\r\n110010100100\r\n111110110101\r\n010010111001\r\n110111000110\r\n011101000000\r\n100001101100\r\n111101000111\r\n000101111111\r\n001111010100\r\n101001100100\r\n111111110001\r\n010010010001\r\n111011101010\r\n001110101000\r\n111101100001\r\n100001000001\r\n111001111010\r\n100101000011\r\n000001110011\r\n000111100001\r\n110010011110\r\n111111101011\r\n000101001001\r\n000101111101\r\n011101011001\r\n100100000111\r\n110000001011\r\n001111100110\r\n110010001101\r\n011101011011\r\n011100111111\r\n000001010000\r\n011001010101\r\n001111001010\r\n010111000000\r\n001101101101\r\n011111000111\r\n000111011101\r\n100100111100\r\n011101011111\r\n111000000111\r\n100111101101\r\n001001111001\r\n010001100101\r\n101111100001\r\n000010101101\r\n010001011111\r\n000111101010\r\n011101111101\r\n111111110101\r\n011111001101\r\n110101001100\r\n011110001110\r\n001001010000\r\n010001010001\r\n011000010010\r\n100010000100\r\n100100100001\r\n011101101111\r\n111000101111\r\n001101110110\r\n110011110000\r\n000111011111\r\n011100110010\r\n001101101110\r\n101010100010\r\n111110110010\r\n111101000100\r\n001010101000\r\n001100101001\r\n111010101000\r\n010110000100\r\n110111001000\r\n111100000110\r\n001110001011\r\n011111111100\r\n110011100000\r\n001010011100\r\n110011001000\r\n001001110101\r\n001010110110\r\n110010100101\r\n100000111111\r\n110010000100\r\n110110100100\r\n001011101101\r\n000110000010\r\n001100000111\r\n010011100110\r\n001010101011\r\n111001101000\r\n110111010010\r\n110111001100\r\n010000111100\r\n010111100110\r\n001111111111\r\n011010111010\r\n100111011100\r\n011011011010\r\n001000001110\r\n111010100101\r\n100001011000\r\n011001110011\r\n100111011000\r\n111111101000\r\n010111011010\r\n111011111000\r\n001010101110\r\n000010010111\r\n110011000010\r\n100000111010\r\n110000001111\r\n011110111101\r\n101011011001\r\n011110011111\r\n100001111010\r\n111001010110\r\n100001010000\r\n011000100000\r\n111001011000\r\n000100110011\r\n010110111101\r\n010111000100\r\n100111011101\r\n100000011010\r\n010110111001\r\n010101001110\r\n110001001001\r\n111100010001\r\n111010110011\r\n100100010100\r\n000100100000\r\n100100110010\r\n111011100000\r\n111010110010\r\n110110100110\r\n001001010001\r\n010110100111\r\n111001101100\r\n000111111001\r\n011100000110\r\n011011010010\r\n001010111000\r\n001100000010\r\n100001110001\r\n011101110111\r\n010101010100\r\n111100111001\r\n010000010101\r\n011110011110\r\n000011110100\r\n000111100100\r\n100100011000\r\n101000011011\r\n111010000100\r\n000001000111\r\n111111011111\r\n000111010101\r\n000111100101\r\n000000001101\r\n000011100001\r\n101000100111\r\n100111010001\r\n001110101010\r\n101101110001\r\n101000111001\r\n001101100011\r\n101110000111\r\n100111110010\r\n010001111111\r\n100111000010\r\n100111101111\r\n111011110110\r\n100111000100\r\n000011111110\r\n001010000101\r\n111011111110\r\n010010101111\r\n010011001110\r\n110100000001\r\n110101110001\r\n000010001101\r\n000110001010\r\n101111110010\r\n111111001000\r\n001001100001\r\n110001110100\r\n110111111011\r\n000010000101\r\n111100111000\r\n010000000010\r\n001110111001\r\n111000110111\r\n000010000001\r\n111111010010\r\n010010001010\r\n001110010111\r\n000111111110\r\n100101000001\r\n000001110111\r\n101000010000\r\n100011011001\r\n010000101101\r\n011101000110\r\n110011001011\r\n110100011010\r\n100111000101\r\n011000000100\r\n110010101110\r\n001000101110\r\n100010111111\r\n100011111011\r\n001101010001\r\n111000100100\r\n100101100100\r\n001000100001\r\n000011000101\r\n001000110001\r\n110110011011\r\n100110010111\r\n110000011101\r\n000010000010\r\n011111001111\r\n000100111000\r\n100001011011\r\n110010000000\r\n000100010100\r\n011000101001\r\n100111011011\r\n110000101101\r\n111000110011\r\n101100010111\r\n101001100110\r\n110011111011\r\n100110100110\r\n100111111111\r\n100100101010\r\n001000011111\r\n000110101101\r\n110111100001\r\n100111000110\r\n100111110110\r\n111111100000\r\n100010001011\r\n100000000010\r\n110001001000\r\n101101001110\r\n111101110011\r\n010111001111\r\n011111010100\r\n110111000101\r\n010010001110\r\n010111100010\r\n111110010011\r\n001100011011\r\n100000110111\r\n010111110110\r\n001100011101\r\n010010010111\r\n110011001101\r\n000111101110\r\n011000001111\r\n010100000000\r\n110001101001\r\n101101010111\r\n110111010100\r\n101010010111\r\n001110111110\r\n101001000111\r\n011010010110\r\n010000101100\r\n110000111111\r\n011101010000\r\n010110001101\r\n010101000101\r\n101101001000\r\n100010110001\r\n101000110101\r\n111101010101\r\n010011111100\r\n100010100110\r\n011001111001\r\n000110001001\r\n101100000101\r\n000101011010\r\n100100011110\r\n100000110011\r\n100011000101\r\n110001011010\r\n111100000111\r\n001100110111\r\n011010110000\r\n011000000111\r\n111101101011\r\n011101110101\r\n010100011110\r\n010101100011\r\n000100010000\r\n010111001011\r\n101110100001\r\n110110110101\r\n000010100111\r\n001011000110\r\n110110101100\r\n010001100010\r\n011110110111\r\n110100001100\r\n000110001100\r\n001101001100\r\n101010111011\r\n000001101100\r\n011110101101\r\n110100000000\r\n011011100111\r\n000010101001\r\n100111110101\r\n000101000101\r\n010011010111\r\n111101010100\r\n110110101101\r\n110011011100\r\n110011011001\r\n000111010111\r\n110100011110\r\n000110011010\r\n110110100000\r\n111110101101\r\n001100111000\r\n101111000110\r\n011011000010\r\n000000001001\r\n010100111110\r\n100010000110\r\n001110111101\r\n010001011100\r\n101001111101\r\n110101110000\r\n001111101111\r\n100101111101\r\n110100111101\r\n000100001000\r\n111011110101\r\n001011001000\r\n011101010111\r\n101000000101\r\n011111111001\r\n111001011011\r\n010001110001\r\n010001110011\r\n001100111001\r\n100101110010\r\n100010100010\r\n110011111001\r\n111011101011\r\n001101110011\r\n000011011010\r\n101000010111\r\n000011010001\r\n101000010010\r\n000011101111\r\n011100001100\r\n110110011001\r\n011101000001\r\n010011011001\r\n111010010011\r\n001011000111\r\n010111100101\r\n101001111011\r\n101111011011\r\n011011001100\r\n010100110000\r\n000111100011\r\n010111111011\r\n100101101010\r\n010001100000\r\n111110100011\r\n100101011101\r\n011011011011\r\n111101011001\r\n001000011101\r\n101111110011\r\n100100100110\r\n010111100111\r\n110000001101\r\n000001010011\r\n100001010100\r\n101101000100\r\n110100101101\r\n110001100011\r\n110000111010\r\n101111011010\r\n011011100000\r\n100101100110\r\n010110010001\r\n101000011000\r\n011001110100\r\n001110001100\r\n100100110100\r\n001110101011\r\n000110000100\r\n101000110001\r\n101101110010\r\n011100001110\r\n111011010011\r\n011001110001\r\n110101100000\r\n110000010011\r\n010111101111\r\n101111101111\r\n010110100000\r\n111111011011\r\n100110000110\r\n011000111100\r\n110010111110\r\n001000001101\r\n011101011010\r\n001010110101\r\n100110001100\r\n101000000011\r\n110001010011\r\n100001011111\r\n000001101001\r\n100001101101\r\n011100100000\r\n011011000110\r\n001110111011\r\n100111100101\r\n001110000000\r\n110101001101\r\n101100101100\r\n001110000001\r\n110000011010\r\n101100110010\r\n011010100010\r\n111101111010\r\n110001111100\r\n011110101000\r\n110011011000\r\n110100000111\r\n100000000111\r\n101100101110\r\n011001000011\r\n011011100110\r\n101001000001\r\n001100100101\r\n011011110011\r\n110110001011\r\n000101011110\r\n010011110101\r\n110101001010\r\n111110101010\r\n110111010001\r\n010111001101\r\n001101011000\r\n011001011011\r\n011101000010\r\n101010111110\r\n010010000101\r\n100100010010\r\n110010000010\r\n000000001110\r\n100110011100\r\n000110100111\r\n000000011011\r\n111011010000\r\n100001111000\r\n000010010011\r\n110010000101\r\n011001101111\r\n010010000110\r\n101000110100\r\n010111010110\r\n011010110010\r\n001101110001\r\n001101000100\r\n001001101011\r\n010111110101\r\n100100110101\r\n000101011011\r\n110110000111\r\n000100110001\r\n111111110011\r\n111010110000\r\n000000110001\r\n010011101001\r\n111110011101\r\n101011100100\r\n001010100101\r\n010111111100\r\n010101100100\r\n011010000000\r\n010111111111\r\n111001100011\r\n111001011110\r\n010011111010\r\n001010101100\r\n110001100101\r\n011000011110\r\n001111010010\r\n010110001110\r\n011101011110\r\n101100011010\r\n000000001000\r\n000000000000\r\n100000011000\r\n101000001111\r\n101101010010\r\n001010110010\r\n101111001001\r\n111000000001\r\n010011001010\r\n110000000101\r\n101101101000\r\n110011110111\r\n111101010110\r\n111011011011\r\n100011101100\r\n101100011011\r\n000011010110\r\n111100111101\r\n110000100100\r\n001111110111\r\n011110011101\r\n010001010110\r\n101000001110\r\n101010101110\r\n010110000011\r\n100001100000\r\n000001000011\r\n110011100010\r\n000101000110\r\n010010110110\r\n100111100011\r\n000110100100\r\n110100101110\r\n001101100101\r\n110000100000\r\n110001100110\r\n110010000001\r\n010010011011\r\n101111001010\r\n101010010110\r\n001001001100\r\n011001110010\r\n111010100100\r\n000001000100\r\n010101101001\r\n101001100011\r\n010010100100\r\n010111001010\r\n101000000100\r\n011001010100\r\n101110000110\r\n011010000111\r\n101001110001\r\n111000011110\r\n010011000111\r\n111000100111\r\n010101010011\r\n010010101010\r\n011110011001\r\n110010011101\r\n110100001001\r\n011111001001\r\n011110100011\r\n100100001111\r\n000010100101\r\n110010010111\r\n111111000101\r\n000001010100\r\n001000011110\r\n011101001110\r\n111001100101\r\n111110011110\r\n000110111100\r\n110001001110\r\n011001010111\r\n101100011101\r\n010000001001\r\n100100011101\r\n101001101000\r\n100011110101\r\n100110101101\r\n000001111001\r\n011110010001\r\n001001011001\r\n110111100111\r\n100000010111\r\n011110010010\r\n000011110000\r\n111011110111\r\n101110110010\r\n000111010100\r\n010010101001\r\n000011010010\r\n101010001011\r\n111100101100\r\n111101101111\r\n101001011111\r\n101110001010\r\n010101011110\r\n101001001101\r\n100010111100\r\n011110111001\r\n110100111110\r\n001101000011\r\n000111100010\r\n100111110011\r\n010111011011\r\n101010111100\r\n100111111110\r\n001111001011\r\n000101110001\r\n001000001010\r\n010001101101\r\n101101001101\r\n111100010000\r\n011110000110\r\n100011101110\r\n111100001110\r\n101000100010\r\n101010100101\r\n110011010111\r\n110010101010\r\n110110111111\r\n010010110011\r\n000111110010\r\n111100110011`;\r\n\r\nexport default data;\r\n","const data = `00100\r\n11110\r\n10110\r\n10111\r\n10101\r\n01111\r\n00111\r\n11100\r\n10000\r\n11001\r\n00010\r\n01010`;\r\n\r\nexport default data;\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Day } from \"../../lib/Day\";\r\nimport { range } from \"../../lib/utils\";\r\nimport data from \"./input/day03\";\r\nimport testData from \"./input/day03test\";\r\n\r\nconst parse = (data: string) => data.split(/\\n/);\r\n\r\nconst str2bin = (value: string) => {\r\n  return value\r\n    .split(\"\")\r\n    .reduce<number>((prev, cur) => (prev << 1) | Number(cur), 0);\r\n};\r\n\r\nconst bin2str = (value: number) => {\r\n  let str = \"\";\r\n  while (value > 0) {\r\n    str = ((value & 1) === 1 ? \"1\" : \"0\") + str;\r\n    value = value >> 1;\r\n  }\r\n  return str;\r\n};\r\n\r\nconst getBitParity = (number: string[]) => {\r\n  return number.filter((x) => x === \"1\").length >= number.length / 2\r\n    ? \"1\"\r\n    : \"0\";\r\n};\r\n\r\nconst part1 = (data: string[]) => {\r\n  const len = data[0].length;\r\n  const pivot = range(len)\r\n    .map<string[]>((column) => data.map<string>((number) => number[column]))\r\n    .map((x) => getBitParity(x));\r\n  const gamma = str2bin(pivot.join(\"\"));\r\n  const epsilon =\r\n    str2bin(pivot.join(\"\")) ^ str2bin(Array<string>(len).fill(\"1\").join(\"\"));\r\n\r\n  return gamma * epsilon;\r\n};\r\n\r\nconst hasBitSet = (data: string[], bitIndex: number, bitValue: string = \"1\") =>\r\n  data[bitIndex] === bitValue;\r\n\r\nconst bitsAtOffset = (data: string[], bitIndex: number) =>\r\n  data.map((x) => x[bitIndex]);\r\n\r\nconst findOxygenValue = (data: string[]) => {\r\n  const filterBits = (x: string, bitOffset: number) =>\r\n    hasBitSet(\r\n      x.split(\"\"),\r\n      bitOffset,\r\n      getBitParity(bitsAtOffset(data, bitOffset))\r\n    );\r\n\r\n  range(data[0].length).forEach((currentBit) => {\r\n    if (data.length === 1) return;\r\n    data = data.filter((x) => filterBits(x, currentBit));\r\n  });\r\n  return str2bin(data[0]);\r\n};\r\n\r\nconst findScrubberValue = (data: string[]) => {\r\n  const filterBits = (x: string, bitOffset: number) =>\r\n    hasBitSet(\r\n      x.split(\"\"),\r\n      bitOffset,\r\n      str2bin(getBitParity(bitsAtOffset(data, bitOffset))) ? \"0\" : \"1\"\r\n    );\r\n\r\n  range(data[0].length).forEach((currentBit) => {\r\n    if (data.length === 1) return;\r\n    data = data.filter((x) => filterBits(x, currentBit));\r\n  });\r\n  return str2bin(data[0]);\r\n};\r\n\r\nconst part2 = (data: string[]) => {\r\n  const len = data[0].length;\r\n  const oxygen = findOxygenValue(data);\r\n  const scrubber = findScrubberValue(data);\r\n\r\n  return oxygen * scrubber;\r\n};\r\n\r\nconst day: Day<string[], number> = {\r\n  parts: [\r\n    {\r\n      desc: \"What is the power consumption of the submarine?\",\r\n      tests: [{ data: parse(testData), runner: part1, result: 198 }],\r\n      solutions: [{ data: parse(data), runner: part1 }],\r\n    },\r\n    {\r\n      desc: \"\",\r\n      tests: [{ data: parse(testData), runner: part2, result: 230 }],\r\n      solutions: [{ data: parse(data), runner: part2 }],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default day;\r\n","const data = `79,9,13,43,53,51,40,47,56,27,0,14,33,60,61,36,72,48,83,42,10,86,41,75,16,80,15,93,95,45,68,96,84,11,85,63,18,31,35,74,71,91,39,88,55,6,21,12,58,29,69,37,44,98,89,78,17,64,59,76,54,30,65,82,28,50,32,77,66,24,1,70,92,23,8,49,38,73,94,26,22,34,97,25,87,19,57,7,2,3,46,67,90,62,20,5,52,99,81,4\r\n\r\n 7 42 22 92 60\r\n 8 88 99 13 12\r\n16 62 86 24 77\r\n20 57 19 67 46\r\n36 83 54 63 82\r\n\r\n 7 86 50 78 16\r\n83 45 67 94 58\r\n21 98 99 85 43\r\n71 19 31 22  4\r\n70 51 34 11 61\r\n\r\n 4 95 84 51 36\r\n43 40 37 23 85\r\n14 90  8 59 99\r\n 0 88 68 93 81\r\n25  6 55 19 48\r\n\r\n15 39 78  6 13\r\n71  3 81 95 62\r\n22 46 67 72 40\r\n89 69  0 37 41\r\n68 79 58 16 42\r\n\r\n63 50 77 34 12\r\n29 42 20 17 47\r\n80 10 30 72 66\r\n 5 89 64 25 21\r\n91 88 45 44 37\r\n\r\n78 89 32 26 56\r\n 8 40 54 25 49\r\n36 30 21 23  3\r\n12 58  2 29  7\r\n33 99 15 84 44\r\n\r\n96 68 56 49 43\r\n55 22 16 91 32\r\n 2 17 61 12 37\r\n25 72  1 31 88\r\n57 34 42  8 71\r\n\r\n18 39 86 94 60\r\n96 85 64 51 28\r\n48 14 23 36 35\r\n 6 84 99 90 81\r\n43 41 74 68 32\r\n\r\n 9 58 60  7 61\r\n96 33 67  0 19\r\n77  2 14 99 79\r\n13 36 90 95 29\r\n86 91 49 72 20\r\n\r\n 3 79 24 37 97\r\n86 10 77 31 32\r\n48 89 35 73 94\r\n65 21 23 82 36\r\n26 51 69 12 99\r\n\r\n66 28 73  6 32\r\n11 30 35 42 76\r\n33 40 25 89 52\r\n46 88 55 50 64\r\n86 71 75 36 80\r\n\r\n36 34 35 68 49\r\n61  3 24 84 71\r\n47 42 91 39 80\r\n25 51 38 59 62\r\n90 21 28 52  8\r\n\r\n19 93 45 40 55\r\n41 11 79  9 70\r\n16 87 32 22 94\r\n12  4 72 60  0\r\n36 77 78 33 83\r\n\r\n43 44  7 39 96\r\n30 75 62 63  8\r\n19 12 40 68 45\r\n50 27  3 52 57\r\n85 67 33 16 36\r\n\r\n33 16 66  9  7\r\n93 34 52 31 13\r\n 3 49 94 39 37\r\n76 59 78 51 83\r\n40 47 22 42 73\r\n\r\n44 60 52  7 38\r\n36 53 79 11 93\r\n46 65 40 68 58\r\n67 73 99 31 87\r\n22 49 33 59 75\r\n\r\n83 61 17 60 86\r\n38 33 96 75 22\r\n19 42 76 55 97\r\n93 94 29 50 88\r\n34 16 91  3 40\r\n\r\n92 48 40 69 98\r\n12 46 37 25 78\r\n43 11 34 22 32\r\n 0 18 17 86  1\r\n89 26 65 76 96\r\n\r\n66 48 43 99 98\r\n68  2 51 87 38\r\n72 77 47 20 97\r\n36 18 80 10 96\r\n88 53 30 65 91\r\n\r\n10  3 65 38 56\r\n40 14 64 45 23\r\n42 88 31 85 17\r\n19 83 46 51  5\r\n35 47 28  0 50\r\n\r\n75 53  9  1 29\r\n92 94 41 82 38\r\n39 70 80 11 56\r\n64 28 27 22 60\r\n66 97 48 65 71\r\n\r\n91 17 37 49 83\r\n66  1 79 87 60\r\n78 46 32 30 57\r\n50 56 23  6 24\r\n13 89 42 70 77\r\n\r\n59 28 58 56 73\r\n22  4 53 91 23\r\n 8 41 36 52 80\r\n30 68 34 70 63\r\n90  3 61 98  1\r\n\r\n50 76 99 74 81\r\n57 25 59 69 96\r\n26 15 43 64 44\r\n73 18 61 91 23\r\n87 13 46 90 60\r\n\r\n63  1 77 93 47\r\n12 90 56 46  0\r\n57 73 79 87 43\r\n32 13 53 37 14\r\n22  3 23 78 69\r\n\r\n49 55 93 57  2\r\n67 12 81 70 79\r\n60 44 94 23 54\r\n48 92 99  1 82\r\n76 36 62 32 98\r\n\r\n94 15 97 55 17\r\n39 40 84 92 49\r\n72 45 52 95 96\r\n61 58 88 23 78\r\n80 48 37 35 66\r\n\r\n86 88 20 12  7\r\n72 52 95 34 11\r\n 1 47 83 63 18\r\n25 35 76 15 92\r\n96 64 82 54 31\r\n\r\n61 83  5 24 36\r\n88 80 48 26 85\r\n 2 42 70 98 45\r\n27  6 65 94 15\r\n71 73  3 47 38\r\n\r\n85 49 19 41 53\r\n 4 99 43 93 60\r\n34 28 78 23 50\r\n54 79 35 25 94\r\n27 63 16 51 39\r\n\r\n89 49 13  1 32\r\n85 87  8 38 64\r\n14  5 63 16 27\r\n23 76 43 59 94\r\n78 80 83 15 54\r\n\r\n26 66 73 74 64\r\n 9 81 62 75 25\r\n46 13 55 43  1\r\n 0  2 10 58 34\r\n76 11 82 42 16\r\n\r\n68 93 18 99 84\r\n96 25 44 69 97\r\n24 80 74 27  6\r\n33 14 54 17 28\r\n10 47  2 63 59\r\n\r\n12 56 29 63  0\r\n30 94  5 19 18\r\n 9 13 24 72 60\r\n91 46 49 47 51\r\n 8 54 26  7 21\r\n\r\n36 16 26 97 56\r\n22 86 58 94 89\r\n66 84 50 82 53\r\n87 29 45 95 33\r\n49 61 46  2 52\r\n\r\n87 35 65 27 69\r\n12 98 94 18 26\r\n22 79  1 74 84\r\n 0 72 29 70 19\r\n96 28 95 25 77\r\n\r\n79 95  3 91 44\r\n57 61 77 80 29\r\n 6 49 37 62 16\r\n71 73 21 52 48\r\n92 17 32  2 43\r\n\r\n29 78  6 94 47\r\n83 63 68 16 56\r\n38 85 92 60 35\r\n81 57 75 79  7\r\n69 22 93 49  4\r\n\r\n93 21  2 17 22\r\n76 70  3 80 51\r\n 7 88 14  0 61\r\n18 16 29 86 74\r\n65 47  8 45 46\r\n\r\n 1 20 23 79 14\r\n27 76  3 90 85\r\n88 35  7 10 92\r\n67 97 59 41  8\r\n56 57 65 45 81\r\n\r\n57 14 41 89 55\r\n47 75 90 23 94\r\n26  3 40 17 97\r\n65 44 12  4 30\r\n16 81 64 79 13\r\n\r\n63  3 22  7 10\r\n36 76 14 77 38\r\n48 27 40  9 60\r\n31 56 75 74 78\r\n86 64 71 90 67\r\n\r\n52 28  9 19 66\r\n15 86 61  2 89\r\n93  3 44 46 91\r\n11  7  5 32 72\r\n60 10 92 29 88\r\n\r\n88 86 59  8 68\r\n10 48 12 61 21\r\n54 97 45 55 11\r\n67  9 22 64  5\r\n 7 34 32 69 44\r\n\r\n69 45 14  6  3\r\n16 32 33 26 73\r\n79 30  5  1 72\r\n64  9 60 59 22\r\n23 56 37 41  2\r\n\r\n25 65 60 87 39\r\n41 53 24 91 93\r\n43 59 26 78 96\r\n16 33 88 18  7\r\n74 63 34 30 20\r\n\r\n38 23 97 73 35\r\n51 31 90 98 80\r\n56 44 60  8  7\r\n71 10 87  0 99\r\n64 30 20 22 18\r\n\r\n61 57 31 69 74\r\n94  0 96 90 59\r\n21  3 72 81  4\r\n43 41 58 45  2\r\n62  7 65 71 19\r\n\r\n60 20 19 48 11\r\n 2 68 58 91 76\r\n57 12 52 29 13\r\n42 53 38 64 81\r\n26 70 16 32 54\r\n\r\n15 93 68 77 49\r\n80 64 45 10 94\r\n30 62  5 66 40\r\n46 51 52 22 56\r\n 7 90 14  6 47\r\n\r\n75 87 31 24 11\r\n47 61 14 69 50\r\n33 44 12 26 58\r\n91 10 35  5 29\r\n99 81 16 92 53\r\n\r\n50 37 47 13 83\r\n63 96 30 36 86\r\n72 66 93 73 74\r\n98 60  3 84 28\r\n52 14 70 21 55\r\n\r\n65 19 32 28 92\r\n 9  8 51  0 98\r\n56 26 53 13 86\r\n 2 70 16 52  4\r\n69 10 97 38 79\r\n\r\n34 48 46 66 44\r\n59 19 18 20 13\r\n99 26 62 16  2\r\n91 25 11 84  4\r\n52 31 70 71 14\r\n\r\n92  1 49 65 77\r\n85  8 27 87 84\r\n41 73 81 15 58\r\n14 93 33 17 52\r\n35 90 37 38  0\r\n\r\n11 46  2 20 31\r\n97 50 12 79 96\r\n89 77 57 61 40\r\n65 75  4 33 17\r\n66 81 47 83 98\r\n\r\n34 57 44  0 99\r\n32 25 17 48 90\r\n27 73 63 61 81\r\n50 22  4 28 41\r\n 6 24 70 13 45\r\n\r\n96 18 36 16 10\r\n37 11 50 56 88\r\n80 40 75 90 12\r\n19 43 33 61 58\r\n30 59 99 69 98\r\n\r\n31 77 98 90 51\r\n34 10 80 73 97\r\n 2 37 33 17  0\r\n59 78 91 87 45\r\n86  7 44 64  1\r\n\r\n26 49 66 13 16\r\n95 89 52 88 55\r\n77 60  3 93 73\r\n64 45 98 38 42\r\n34 86  1 71 68\r\n\r\n59 71 24 18 99\r\n23 28 88 54 26\r\n90 37  6 76  4\r\n41 64 27 89 67\r\n29 95 82 83 60\r\n\r\n 8  0 90 41 61\r\n29 66  2 35 13\r\n12  9  5 36 93\r\n67 94 82 77 37\r\n30 42 32 80 78\r\n\r\n53  6 23 57 38\r\n 8 25 76 18 15\r\n19 17 20 48 72\r\n26 54 64  7 40\r\n50 94 82 67 99\r\n\r\n93  5 67 10  4\r\n77 80 97 14  2\r\n34  9 61 24 21\r\n63 89 28 76 62\r\n54 29 38 68 69\r\n\r\n72 48 66 89 22\r\n63 39 71 59 68\r\n 2 95 94 21 92\r\n 6 28 44 62 15\r\n35 78 80 11 91\r\n\r\n82  8 59 66 25\r\n84 87 95 60 12\r\n 9 52 83 28 49\r\n23 34 85 94 96\r\n43 41 39  2 73\r\n\r\n81 56 55 29 70\r\n94 96  7 90  2\r\n95 45 28 75 12\r\n48 83 65 22 91\r\n68 98  5 41 73\r\n\r\n36 22 45 14 74\r\n35 60 54 15 30\r\n86 49 27 82  4\r\n87  2 52 50 21\r\n39 62 40  1 19\r\n\r\n99  7 85 24 65\r\n26 17 36 35  1\r\n 2 62 38 45 48\r\n72 68 32 59 11\r\n28 53 64 21 76\r\n\r\n61 63 94 50 55\r\n34 42 39 66 37\r\n22 72 18 89 12\r\n16 23  4  0 41\r\n75 64  3 44  5\r\n\r\n87 82 53  5 19\r\n26 54 36  1 38\r\n28 30 48 97 95\r\n34 91 99 23  8\r\n46 35 33 29 66\r\n\r\n76 89 94 77 58\r\n24 31  1 40 25\r\n44 71 42 61  8\r\n16 41 28 33 50\r\n 6 85 66 43 51\r\n\r\n91 28 70 89 43\r\n 1 76 26 90 45\r\n24  2  6 82 23\r\n77 68 16 51 81\r\n58 86 52 29 18\r\n\r\n95  0 25 19 91\r\n10 65 30 72 42\r\n41  8 77 58 23\r\n94 60 34 11 67\r\n24  1 64 78 44\r\n\r\n40 76 21 37 15\r\n44 26 80 77 88\r\n25 72 38 34  9\r\n75 81 43 86 68\r\n59 30 87 61 73\r\n\r\n 0 63 62 82 93\r\n70 61 14 56  3\r\n54 43 92 78 27\r\n26  7 99 77 73\r\n21 30 44 50 40\r\n\r\n 2 60 45 17 73\r\n75 67 68 20 18\r\n16 30 24 37 12\r\n79 50  8 65 19\r\n85 95 54 90 47\r\n\r\n69 68 54 66 17\r\n39 19 20 33 44\r\n12 27 50 60 36\r\n53 81  8  7 87\r\n82 97 18  4 74\r\n\r\n58 63  8 42 28\r\n70 95 39 54 61\r\n30 56 79 37 82\r\n15 32 83 27 45\r\n52 13 90 97 62\r\n\r\n11 50 56 66 84\r\n96 94 57 17 49\r\n68 58 90 34 59\r\n81 36 91  8 45\r\n62 35  6 93 48\r\n\r\n82 89 54 87 80\r\n94  6 45 53 62\r\n31 34 58 85 77\r\n24 25 91 99 26\r\n41  0 59 37 23\r\n\r\n93 41 53 31 87\r\n 7 22 39 86 73\r\n71 34 60 57  6\r\n52 64 48 99 90\r\n66 76 62 45 40\r\n\r\n 5 84 85 67 26\r\n11  1  0 95 21\r\n48 59 43 94 62\r\n22 74 40 49 89\r\n51 20 90 78 96\r\n\r\n 0 45 43 79 25\r\n41 10 95 86 80\r\n 4 60 82 33 75\r\n44 46 38 17 76\r\n22 58 27 73 66\r\n\r\n54 50  7 92 79\r\n11 43 38 94  5\r\n63 80 33 58  4\r\n12 91 28 70 97\r\n26 99 41 52 90\r\n\r\n23 26 95  8 17\r\n73 77 61 89 82\r\n78 80 64 19 96\r\n81 92 47 44 59\r\n54 24 63 74 32\r\n\r\n86 85 37 80 45\r\n47 44 92 29 49\r\n67 48 95 51 88\r\n36  8 56 16 30\r\n 0 97 84 24 13\r\n\r\n81 61 42 87 92\r\n30 75 17 67  2\r\n83 44 96 52  1\r\n37 78 31 15 19\r\n40  9 72  7 28\r\n\r\n10 85 17 38 22\r\n46 35 90 12 27\r\n76 42  7  2 30\r\n55 57 60  9 49\r\n79 73 97  1 21\r\n\r\n52 36 11 82 91\r\n22  7 46 21 12\r\n62 42 66 68 10\r\n31 18 76 20 84\r\n28 79 61 39 86\r\n\r\n73 99 34 54 45\r\n43 28 18 76 40\r\n57 58 63  9 11\r\n89 65  2 12 90\r\n38 97 49 15 27\r\n\r\n28 84 24 17 49\r\n33 69 75 53 92\r\n81 48 89 19 34\r\n59  1 18 72 79\r\n 6 22  2 86 85\r\n\r\n72 78 30 40 19\r\n54 16 25 81 28\r\n41 99  7 79 14\r\n83 76 29  8 91\r\n 5 60 11 51 37\r\n\r\n77 78 34 59 29\r\n62 69 54  8 97\r\n80 53 25 66 85\r\n81 90 31 51 52\r\n63 41 57 68 18\r\n\r\n43 62 11 41  7\r\n37 44 34 10 51\r\n67 36 61 77 70\r\n59  1 25 42 88\r\n29 71 60 15 24\r\n\r\n30 65 57 35 84\r\n34 33 72 73 28\r\n38 51  4 52 14\r\n58 59 85 87 39\r\n88 81 11 93 71\r\n\r\n19  5 23 71 75\r\n70  9 57 69 14\r\n49 29 22 28 10\r\n42 48 63 73  6\r\n79 18  4 39 88\r\n\r\n16 27 31 88 86\r\n29 40 65 68 39\r\n15 95 93 69 22\r\n66 48 18 84 11\r\n 7 51 92 96 99\r\n\r\n 0 69 51 12 82\r\n 4 81 62  2 49\r\n27 66 95 83 70\r\n94 97 99 63 19\r\n87 75 77 73 44\r\n\r\n82 83 75 95 53\r\n46 47 31 14 64\r\n71 70 11 51 87\r\n 7 16 63 38 29\r\n89 13 33 41  0`;\r\n\r\nexport default data;\r\n","const data = `7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1\r\n\r\n22 13 17 11  0\r\n 8  2 23  4 24\r\n21  9 14 16  7\r\n 6 10  3 18  5\r\n 1 12 20 15 19\r\n\r\n 3 15  0  2 22\r\n 9 18 13 17  5\r\n19  8  7 25 23\r\n20 11 10 24  4\r\n14 21 16 12  6\r\n\r\n14 21 17 24  4\r\n10 16 15  9 19\r\n18  8 23 26 20\r\n22 11 13  6  5\r\n 2  0 12  3  7`;\r\n\r\nexport default data;\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Day } from \"../../lib/Day\";\nimport { deepCopy, range } from \"../../lib/utils\";\nimport data from \"./input/day04\";\nimport testData from \"./input/day04test\";\n\ntype Cell = { number: number; marked: boolean };\n\ntype Board = Cell[][];\n\ntype Game = {\n  numbers: number[];\n  boards: Board[];\n};\n\nconst parse = (data: string) => {\n  const blocks = data.split(/\\n\\n/);\n  const numbers = blocks\n    .splice(0, 1)\n    .join(\"\")\n    .trim()\n    .split(\",\")\n    .map((x) => Number(x));\n\n  const boards = blocks.map((board) =>\n    board.split(\"\\n\").map<Cell[]>((row) =>\n      row\n        .trim()\n        .split(/\\s+/)\n        .map((x) => ({ number: Number(x), marked: false }))\n    )\n  );\n\n  return { numbers, boards };\n};\n\nconst pivotBoard = (board: Board) => {\n  return range(board[0].length).map((col) => board.map((row) => row[col]));\n};\n\nconst countHits = (row: Cell[]) =>\n  row.reduce<number>((acc, val) => acc + (val.marked ? 1 : 0), 0);\n\nconst hasBingo = (board: Board) => {\n  const hasBingoRow = board.some((row) => {\n    let rowHits = countHits(row);\n    return rowHits === 5;\n  });\n  if (hasBingoRow) return hasBingoRow;\n\n  const hasBingoColumn = pivotBoard(board).some((col) => {\n    let colHits = countHits(col);\n    return colHits === 5;\n  });\n  return hasBingoColumn;\n};\n\nconst calcScore = (board: Board) => {\n  const remainingCells = board.flat(2).filter((cell) => cell.marked === false);\n  return remainingCells.reduce((acc, val) => acc + val.number, 0);\n};\n\nconst updateBoard = (board: Board, num: number) => {\n  board.forEach((row) => {\n    const found = row.findIndex((c) => c.number === num);\n    if (found > -1) {\n      row[found].marked = true;\n    }\n  });\n};\n\nconst part1 = (data: Game) => {\n  const { numbers, boards } = deepCopy(data) as Game;\n  let score = 0;\n  numbers.some((num) => {\n    boards.forEach((board) => updateBoard(board, num));\n\n    return boards.some((board) => {\n      if (hasBingo(board)) {\n        score = calcScore(board) * num;\n        return true;\n      }\n      return false;\n    });\n  });\n  return score;\n};\n\ntype WinRecord = {\n  winningNum: number;\n  board: Board;\n};\n\nconst part2 = (data: Game) => {\n  let boards = deepCopy(data.boards) as Board[];\n  const numBoards = boards.length;\n  const nums = deepCopy(data.numbers);\n  const winners: WinRecord[] = [];\n\n  while (winners.length < numBoards) {\n    const currentNum = nums.splice(0, 1)[0];\n\n    boards.forEach((board) => updateBoard(board, currentNum));\n\n    boards.forEach((board) => {\n      if (hasBingo(board)) {\n        winners.push({ winningNum: currentNum, board: board });\n      }\n    });\n\n    boards = boards.filter(\n      (board) => winners.findIndex((record) => record.board === board) === -1\n    );\n  }\n  const worstBoard = winners[winners.length - 1];\n  return calcScore(worstBoard.board) * worstBoard.winningNum;\n};\n\nconst day: Day<Game, number> = {\n  parts: [\n    {\n      desc: \"\",\n      tests: [{ data: parse(testData), runner: part1, result: 4512 }],\n      solutions: [{ data: parse(data), runner: part1 }],\n    },\n    {\n      desc: \"\",\n      tests: [{ data: parse(testData), runner: part2, result: 1924 }],\n      solutions: [{ data: parse(data), runner: part2 }],\n    },\n  ],\n};\n\nexport default day;\n","const data = `223,805 -> 223,548\n609,164 -> 609,503\n461,552 -> 796,552\n207,361 -> 207,34\n503,879 -> 503,946\n937,52 -> 937,268\n560,652 -> 118,652\n771,103 -> 85,789\n119,156 -> 947,984\n356,634 -> 607,634\n348,812 -> 873,287\n409,490 -> 726,490\n298,790 -> 298,454\n407,543 -> 820,130\n206,89 -> 591,89\n164,709 -> 976,709\n208,921 -> 208,131\n515,209 -> 515,745\n876,639 -> 281,44\n270,453 -> 727,910\n190,417 -> 190,755\n522,726 -> 903,726\n390,651 -> 603,864\n707,549 -> 926,330\n471,869 -> 471,561\n970,735 -> 401,735\n612,624 -> 612,88\n844,879 -> 844,453\n400,38 -> 400,350\n832,225 -> 984,225\n971,642 -> 42,642\n70,862 -> 447,485\n183,79 -> 183,708\n598,700 -> 598,287\n635,195 -> 39,195\n587,362 -> 349,362\n108,88 -> 965,945\n700,299 -> 165,299\n295,824 -> 785,334\n211,284 -> 390,105\n288,326 -> 672,710\n595,231 -> 595,679\n671,576 -> 813,718\n14,845 -> 784,75\n700,129 -> 43,129\n83,913 -> 889,107\n830,596 -> 322,596\n391,450 -> 391,779\n384,32 -> 384,430\n311,948 -> 938,321\n460,288 -> 460,392\n924,602 -> 924,595\n703,458 -> 703,475\n335,953 -> 335,195\n692,314 -> 927,314\n131,433 -> 131,737\n590,771 -> 965,771\n650,13 -> 963,13\n586,904 -> 658,976\n238,824 -> 782,824\n366,45 -> 691,370\n428,758 -> 201,758\n240,545 -> 30,545\n396,154 -> 332,154\n549,307 -> 233,307\n187,240 -> 851,904\n151,135 -> 937,921\n342,850 -> 342,156\n695,200 -> 695,754\n385,880 -> 893,372\n986,966 -> 813,966\n727,661 -> 727,402\n316,937 -> 316,797\n422,235 -> 422,282\n965,684 -> 882,684\n266,222 -> 419,69\n649,843 -> 635,857\n618,84 -> 126,576\n588,822 -> 588,636\n569,142 -> 569,607\n899,479 -> 488,890\n986,52 -> 369,52\n987,478 -> 551,914\n867,951 -> 973,845\n90,401 -> 304,401\n60,836 -> 798,836\n143,675 -> 686,675\n743,974 -> 743,305\n981,899 -> 551,469\n705,430 -> 493,430\n301,366 -> 823,366\n978,712 -> 617,712\n426,805 -> 426,345\n532,855 -> 532,54\n612,143 -> 612,133\n57,52 -> 955,950\n880,50 -> 16,914\n89,908 -> 89,214\n487,867 -> 586,867\n181,285 -> 181,470\n526,666 -> 86,226\n117,704 -> 117,961\n289,101 -> 983,795\n586,429 -> 442,429\n442,869 -> 734,869\n564,479 -> 564,382\n447,486 -> 62,101\n42,218 -> 509,218\n21,890 -> 843,68\n84,978 -> 921,141\n590,960 -> 590,934\n54,949 -> 967,36\n799,39 -> 767,39\n979,232 -> 979,628\n489,482 -> 339,482\n759,473 -> 290,942\n960,958 -> 32,30\n134,180 -> 134,864\n972,981 -> 13,22\n106,385 -> 11,385\n849,454 -> 447,454\n477,385 -> 955,863\n853,180 -> 922,180\n509,274 -> 751,32\n905,295 -> 779,295\n661,629 -> 104,629\n935,117 -> 93,959\n165,372 -> 746,953\n988,141 -> 122,141\n625,621 -> 625,406\n24,710 -> 465,710\n417,468 -> 851,34\n365,285 -> 572,285\n217,164 -> 217,214\n943,439 -> 465,439\n80,102 -> 80,717\n869,19 -> 54,834\n399,480 -> 399,458\n644,826 -> 644,911\n651,189 -> 651,687\n671,946 -> 332,607\n531,417 -> 657,417\n847,350 -> 847,112\n315,733 -> 871,177\n749,118 -> 692,118\n55,616 -> 55,894\n570,307 -> 633,307\n12,964 -> 883,93\n84,299 -> 84,185\n49,187 -> 903,187\n592,40 -> 842,40\n639,381 -> 802,544\n59,61 -> 836,61\n968,51 -> 266,753\n883,373 -> 883,130\n612,45 -> 406,45\n206,698 -> 206,823\n385,685 -> 385,46\n656,338 -> 73,921\n256,794 -> 365,903\n671,247 -> 248,247\n722,509 -> 635,422\n460,783 -> 615,783\n946,980 -> 946,129\n343,780 -> 343,723\n218,371 -> 218,856\n363,809 -> 143,589\n434,739 -> 889,739\n75,71 -> 975,971\n57,253 -> 582,778\n976,237 -> 976,148\n386,866 -> 386,544\n901,797 -> 901,630\n976,706 -> 195,706\n264,420 -> 272,428\n693,72 -> 693,379\n888,832 -> 888,490\n363,900 -> 363,350\n25,312 -> 25,58\n292,307 -> 481,307\n715,393 -> 976,132\n641,450 -> 96,450\n650,38 -> 432,38\n339,97 -> 476,97\n916,24 -> 13,927\n933,934 -> 34,35\n971,367 -> 971,919\n726,310 -> 477,559\n12,984 -> 986,10\n318,531 -> 318,72\n604,979 -> 12,387\n890,39 -> 890,213\n944,954 -> 33,43\n507,830 -> 284,607\n724,111 -> 724,242\n425,912 -> 425,445\n371,903 -> 371,634\n415,314 -> 415,509\n884,849 -> 884,454\n726,647 -> 447,926\n588,463 -> 588,426\n807,453 -> 807,593\n32,449 -> 975,449\n593,757 -> 593,607\n521,850 -> 521,139\n843,478 -> 843,317\n408,834 -> 408,455\n65,241 -> 864,241\n532,138 -> 613,138\n477,239 -> 477,676\n92,400 -> 92,935\n268,104 -> 300,104\n942,20 -> 93,869\n294,134 -> 695,134\n748,477 -> 748,311\n581,879 -> 481,879\n292,57 -> 874,639\n829,787 -> 944,787\n130,780 -> 442,780\n754,435 -> 956,435\n306,659 -> 306,491\n252,612 -> 646,612\n846,949 -> 846,924\n197,888 -> 145,836\n156,790 -> 151,790\n903,305 -> 671,73\n195,79 -> 195,40\n781,67 -> 781,635\n742,743 -> 742,280\n297,42 -> 618,42\n237,151 -> 156,151\n851,930 -> 47,126\n425,368 -> 659,134\n57,890 -> 898,49\n86,62 -> 86,445\n133,499 -> 133,604\n202,567 -> 872,567\n749,578 -> 749,804\n379,379 -> 147,379\n510,474 -> 510,388\n184,115 -> 738,115\n904,613 -> 550,613\n755,649 -> 755,305\n461,306 -> 461,547\n469,124 -> 542,124\n736,218 -> 736,968\n307,662 -> 307,188\n360,970 -> 58,668\n36,267 -> 214,267\n980,330 -> 22,330\n222,972 -> 222,178\n846,774 -> 714,774\n798,837 -> 789,837\n567,258 -> 567,502\n325,582 -> 325,976\n138,386 -> 138,691\n326,878 -> 326,386\n790,276 -> 811,276\n517,522 -> 81,86\n493,567 -> 406,567\n522,370 -> 13,370\n31,697 -> 607,121\n297,524 -> 297,320\n790,681 -> 753,681\n90,961 -> 901,150\n262,46 -> 262,68\n18,26 -> 977,985\n782,381 -> 956,381\n353,740 -> 353,595\n32,448 -> 941,448\n405,254 -> 686,254\n853,57 -> 297,613\n555,209 -> 439,209\n765,679 -> 142,56\n175,903 -> 175,685\n693,653 -> 845,653\n394,108 -> 394,901\n351,108 -> 335,108\n841,83 -> 841,716\n525,608 -> 525,496\n874,32 -> 874,214\n354,760 -> 44,760\n249,330 -> 864,945\n553,377 -> 553,944\n903,374 -> 335,374\n387,34 -> 387,86\n380,331 -> 380,124\n618,520 -> 797,520\n718,169 -> 703,169\n355,184 -> 851,184\n582,570 -> 582,313\n312,952 -> 312,460\n269,70 -> 269,197\n701,907 -> 701,768\n645,417 -> 645,548\n931,532 -> 367,532\n497,361 -> 497,348\n563,642 -> 976,642\n376,504 -> 376,448\n538,945 -> 538,773\n594,886 -> 594,281\n879,558 -> 192,558\n985,68 -> 66,987\n599,420 -> 599,41\n296,318 -> 296,132\n330,619 -> 302,619\n245,137 -> 918,810\n823,798 -> 556,531\n64,201 -> 723,860\n955,365 -> 955,829\n372,976 -> 255,859\n804,962 -> 168,962\n200,442 -> 200,97\n965,964 -> 870,869\n534,158 -> 128,564\n380,739 -> 577,542\n740,391 -> 740,651\n167,177 -> 619,177\n215,449 -> 215,330\n494,612 -> 19,137\n458,634 -> 458,257\n884,817 -> 393,326\n407,291 -> 19,679\n627,173 -> 627,570\n53,93 -> 552,592\n809,363 -> 119,363\n588,418 -> 588,764\n807,131 -> 807,834\n616,61 -> 514,61\n553,642 -> 236,325\n959,553 -> 683,553\n36,754 -> 36,830\n533,293 -> 144,293\n950,780 -> 396,780\n949,878 -> 14,878\n453,180 -> 989,180\n22,46 -> 670,694\n479,206 -> 479,552\n22,53 -> 599,53\n254,964 -> 884,334\n578,813 -> 100,813\n945,247 -> 778,80\n312,978 -> 312,518\n882,225 -> 882,967\n581,683 -> 293,395\n107,540 -> 534,967\n382,946 -> 28,946\n864,743 -> 246,743\n538,558 -> 733,753\n811,436 -> 814,436\n982,33 -> 65,950\n785,829 -> 945,829\n322,471 -> 346,471\n904,528 -> 904,669\n231,471 -> 772,471\n773,490 -> 669,386\n867,482 -> 417,32\n352,856 -> 352,478\n723,355 -> 619,355\n667,922 -> 667,247\n642,386 -> 241,386\n594,35 -> 594,580\n916,723 -> 793,723\n73,774 -> 269,970\n43,273 -> 148,168\n744,637 -> 825,637\n98,30 -> 98,383\n130,277 -> 802,277\n167,122 -> 672,627\n871,866 -> 564,559\n923,475 -> 539,859\n422,714 -> 422,946\n667,950 -> 667,640\n758,181 -> 12,927\n129,927 -> 129,288\n485,661 -> 402,661\n114,573 -> 974,573\n674,779 -> 851,779\n977,184 -> 977,143\n229,937 -> 229,138\n520,887 -> 520,512\n918,329 -> 918,990\n732,41 -> 521,41\n399,245 -> 883,729\n824,618 -> 356,618\n215,218 -> 845,848\n704,34 -> 307,431\n124,166 -> 696,738\n692,749 -> 839,749\n790,637 -> 790,598\n697,396 -> 669,396\n419,140 -> 113,446\n426,738 -> 171,738\n489,494 -> 190,793\n320,301 -> 320,398\n275,809 -> 275,717\n537,703 -> 465,703\n536,450 -> 560,450\n153,927 -> 914,166\n246,692 -> 485,453\n26,179 -> 26,554\n487,678 -> 487,696\n807,719 -> 224,719\n605,920 -> 899,920\n112,262 -> 112,765\n752,898 -> 752,429\n861,103 -> 861,477\n628,505 -> 628,248\n556,293 -> 556,276\n826,682 -> 273,129\n685,324 -> 685,692\n544,410 -> 544,678\n796,633 -> 796,950\n753,843 -> 753,936\n817,40 -> 817,600\n137,941 -> 677,401\n563,457 -> 599,457\n251,644 -> 251,67\n170,792 -> 805,792\n171,486 -> 171,877\n337,481 -> 268,412\n43,158 -> 44,158\n148,610 -> 863,610\n332,765 -> 202,765\n307,637 -> 334,637\n557,380 -> 231,54\n858,76 -> 150,784\n477,329 -> 319,329\n306,608 -> 306,38\n245,42 -> 245,929\n15,786 -> 745,786\n946,321 -> 841,321\n837,281 -> 837,762\n847,391 -> 847,840\n304,52 -> 304,299\n938,122 -> 877,122\n214,347 -> 862,347\n494,540 -> 751,540\n184,29 -> 913,758\n904,12 -> 15,901\n573,23 -> 158,23\n926,603 -> 643,603\n105,506 -> 518,506\n551,917 -> 983,917\n708,33 -> 831,33\n347,173 -> 218,44\n933,175 -> 933,781\n902,556 -> 902,812\n556,485 -> 252,789\n823,807 -> 368,352\n217,744 -> 217,470\n795,455 -> 795,783\n170,944 -> 926,188\n55,655 -> 258,655\n158,57 -> 959,858\n714,823 -> 714,550\n238,18 -> 388,18\n980,985 -> 12,17\n360,596 -> 770,596\n846,684 -> 220,58\n552,107 -> 552,974\n228,552 -> 354,552\n421,41 -> 421,103\n674,475 -> 912,475\n455,626 -> 455,683\n952,841 -> 946,841\n920,792 -> 381,253\n786,918 -> 786,175\n889,859 -> 889,24\n178,604 -> 573,209\n71,621 -> 550,621\n38,36 -> 922,920\n104,690 -> 575,690\n252,883 -> 894,241\n627,107 -> 417,107\n768,913 -> 13,158\n708,337 -> 708,407\n156,941 -> 156,297\n814,653 -> 814,829\n234,920 -> 896,920\n652,170 -> 128,170\n765,825 -> 347,825\n681,901 -> 681,112\n410,301 -> 979,301\n462,681 -> 462,726\n117,957 -> 117,693\n479,948 -> 698,948\n839,965 -> 97,223\n102,189 -> 102,366\n93,798 -> 819,72\n27,336 -> 27,655\n161,635 -> 527,269\n140,272 -> 140,336\n884,915 -> 41,72\n575,563 -> 155,563\n387,601 -> 387,597\n355,186 -> 782,613\n866,435 -> 816,435\n96,161 -> 764,161\n971,29 -> 21,979`;\n\nexport default data;\n","const data = `0,9 -> 5,9\n8,0 -> 0,8\n9,4 -> 3,4\n2,2 -> 2,1\n7,0 -> 7,4\n6,4 -> 2,0\n0,9 -> 2,9\n3,4 -> 1,4\n0,0 -> 8,8\n5,5 -> 8,2`;\n\nexport default data;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Day } from \"../../lib/Day\";\nimport { range } from \"../../lib/utils\";\nimport data from \"./input/day05\";\nimport testData from \"./input/day05test\";\nimport { step } from \"../../lib/utils\";\nimport { logMsg } from \"../../ui/Debugger\";\n\ntype Point = { x: number; y: number };\n\ntype Move = {\n  from: Point;\n  to: Point;\n};\n\ntype Map = Record<string, number>;\n\nconst parse = (data: string) => {\n  return data.split(\"\\n\").map((row) => {\n    const [from, to] = row.split(/ -> /);\n\n    const [fromX, fromY] = from.split(\",\").map((x) => Number(x));\n    const [toX, toY] = to.split(\",\").map((x) => Number(x));\n\n    return { from: { x: fromX, y: fromY }, to: { x: toX, y: toY } } as Move;\n  });\n};\n\nconst render = (map: Map) => {\n  let xLow: number = Number.MAX_SAFE_INTEGER;\n  let xHi: number = Number.MIN_SAFE_INTEGER;\n  let yLow: number = Number.MAX_SAFE_INTEGER;\n  let yHi: number = Number.MIN_SAFE_INTEGER;\n\n  Object.keys(map).forEach((key) => {\n    const [x, y] = key.split(\"-\").map((val) => Number(val));\n    if (x < xLow) xLow = x;\n    if (x > xHi) xHi = x;\n    if (y < yLow) yLow = y;\n    if (y > yHi) yHi = y;\n  });\n\n  let outMap = new Array(yHi - yLow + 1)\n    .fill([])\n    .map((row) => new Array(xHi - xLow + 1).fill(\" \"));\n\n  for (let y = yLow; y <= yHi; y++) {\n    for (let x = xLow; x <= xHi; x++) {\n      const hash = `${x}-${y}`;\n      if (hash in map) {\n        outMap[y - yLow][x - xLow] = map[hash] > 1 ? map[hash] : \"∙\";\n      }\n    }\n  }\n  logMsg(outMap.map((row) => row.join(\"  \")).join(\"\\n\"));\n};\n\nconst safeDelta = (one: number, other: number) => {\n  return one === other ? 0 : (other - one) / Math.abs(other - one);\n};\n\nconst plot = (move: Move, map: Map) => {\n  const len =\n    Math.max(\n      Math.abs(move.to.x - move.from.x),\n      Math.abs(move.to.y - move.from.y)\n    ) + 1;\n  const xStep = safeDelta(move.from.x, move.to.x);\n  const yStep = safeDelta(move.from.y, move.to.y);\n\n  const coords = range(len).map<Point>((step) => {\n    return {\n      x: move.from.x + step * xStep,\n      y: move.from.y + step * yStep,\n    };\n  });\n\n  coords.forEach((pt) => {\n    const hash = `${pt.x}-${pt.y}`;\n    map[hash] = hash in map ? map[hash] + 1 : 1;\n  });\n\n  return map;\n};\n\nconst plotMoves = (data: Move[]) => {\n  return data.reduce<Map>((map, move) => {\n    return plot(move, map);\n  }, {} as Record<string, number>);\n};\n\nconst part1 = (data: Move[]) => {\n  const straights = data.filter(\n    (move) => move.from.x === move.to.x || move.from.y === move.to.y\n  );\n  const map = plotMoves(straights);\n  const numOverlaps = Object.values(map).filter((x) => x >= 2).length;\n  return numOverlaps;\n};\n\nconst part2 = (data: Move[]) => {\n  const paths = data.filter((move) => {\n    return (\n      move.from.x === move.to.x ||\n      move.from.y === move.to.y ||\n      step(move.from.x, move.to.x).length ===\n        step(move.from.y, move.to.y).length\n    );\n  });\n  const map = plotMoves(paths);\n  const numOverlaps = Object.values(map).filter((x) => x >= 2).length;\n  return numOverlaps;\n};\n\nconst day: Day<Move[], number> = {\n  parts: [\n    {\n      desc: \"\",\n      // tests: [],\n      tests: [{ data: parse(testData), runner: part1, result: 5 }],\n      // solutions: [],\n      solutions: [{ data: parse(data), runner: part1, result: 7142 }],\n    },\n    {\n      desc: \"\",\n      // tests: [],\n      tests: [{ data: parse(testData), runner: part2, result: 12 }],\n      // solutions: [],\n      solutions: [{ data: parse(data), runner: part2 }],\n    },\n  ],\n};\n\nexport default day;\n","const data = `3,4,1,2,1,2,5,1,2,1,5,4,3,2,5,1,5,1,2,2,2,3,4,5,2,5,1,3,3,1,3,4,1,5,3,2,2,1,3,2,5,1,1,4,1,4,5,1,3,1,1,5,3,1,1,4,2,2,5,1,5,5,1,5,4,1,5,3,5,1,1,4,1,2,2,1,1,1,4,2,1,3,1,1,4,5,1,1,1,1,1,5,1,1,4,1,1,1,1,2,1,4,2,1,2,4,1,3,1,2,3,2,4,1,1,5,1,1,1,2,5,5,1,1,4,1,2,2,3,5,1,4,5,4,1,3,1,4,1,4,3,2,4,3,2,4,5,1,4,5,2,1,1,1,1,1,3,1,5,1,3,1,1,2,1,4,1,3,1,5,2,4,2,1,1,1,2,1,1,4,1,1,1,1,1,5,4,1,3,3,5,3,2,5,5,2,1,5,2,4,4,1,5,2,3,1,5,3,4,1,5,1,5,3,1,1,1,4,4,5,1,1,1,3,1,4,5,1,2,3,1,3,2,3,1,3,5,4,3,1,3,4,3,1,2,1,1,3,1,1,3,1,1,4,1,2,1,2,5,1,1,3,5,3,3,3,1,1,1,1,1,5,3,3,1,1,3,4,1,1,4,1,1,2,4,4,1,1,3,1,3,2,2,1,2,5,3,3,1,1`;\n\nexport default data;\n","const data = `3,4,3,1,2`;\n\nexport default data;\n","import { Day } from \"../../lib/Day\";\r\nimport data from \"./input/day06\";\r\nimport testData from \"./input/day06test\";\r\n\r\nconst parse = (data: string): number[] => {\r\n  return data.split(\",\").map((val) => Number(val) as number);\r\n};\r\n\r\nconst getHistogram = (data: number[]) => {\r\n  const histogram: number[] = Array(9).fill(0);\r\n  data.forEach((fish) => {\r\n    histogram[fish] = fish in histogram ? histogram[fish] + 1 : 1;\r\n  });\r\n  return histogram;\r\n};\r\n\r\nconst simulate = (data: number[], maxDays = 80) => {\r\n  const histogram = getHistogram(data);\r\n\r\n  let day = 0;\r\n  while (day < maxDays) {\r\n    const births = Number([histogram.splice(0, 1)]);\r\n    histogram[6] += births;\r\n    histogram[8] = births;\r\n    day++;\r\n  }\r\n  return histogram.reduce((prev, cur) => prev + cur);\r\n};\r\n\r\nconst part1 = (data: number[]) => {\r\n  return simulate(data);\r\n};\r\n\r\nconst part2 = (data: number[]) => {\r\n  return simulate(data, 256);\r\n};\r\n\r\nconst day: Day<number[], number> = {\r\n  parts: [\r\n    {\r\n      desc: \"\",\r\n      tests: [{ data: parse(testData), runner: part1, result: 5934 }],\r\n      solutions: [{ data: parse(data), runner: part1, result: 365131 }],\r\n    },\r\n    {\r\n      desc: \"\",\r\n      tests: [{ data: parse(testData), runner: part2, result: 26984457539 }],\r\n      solutions: [{ data: parse(data), runner: part2 }],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default day;\r\n","const data = `1101,1,29,67,1102,0,1,65,1008,65,35,66,1005,66,28,1,67,65,20,4,0,1001,65,1,65,1106,0,8,99,35,67,101,99,105,32,110,39,101,115,116,32,112,97,115,32,117,110,101,32,105,110,116,99,111,100,101,32,112,114,111,103,114,97,109,10,231,350,1278,139,664,182,40,377,157,886,184,138,727,661,904,24,77,349,608,1346,963,12,759,112,129,818,1046,600,43,523,709,1002,2,202,212,11,264,0,505,956,163,560,128,299,0,229,4,33,1402,268,418,1435,151,786,727,100,248,57,763,311,206,67,997,379,378,332,0,23,143,93,389,815,11,66,873,1414,7,7,681,140,288,390,434,314,215,360,3,317,463,294,0,33,801,1417,54,782,937,94,102,95,15,177,649,45,107,695,100,49,193,636,263,177,932,345,706,99,28,211,449,442,117,7,467,101,732,947,818,346,87,78,285,236,707,912,1652,294,333,706,758,1621,782,246,546,663,699,177,94,221,746,66,170,514,364,751,1486,157,54,38,1469,0,79,83,1060,422,252,27,1332,386,523,41,934,988,278,409,438,61,1047,260,300,240,0,496,1392,181,268,413,544,1169,662,566,4,988,267,1259,250,346,319,235,172,728,1621,505,1490,17,104,711,714,1139,497,603,759,393,1184,60,369,1326,333,45,51,118,1171,29,1560,252,139,481,1160,177,555,150,115,129,237,1672,613,1311,999,217,20,936,323,116,60,198,644,718,69,594,1142,607,854,878,926,515,29,2,740,1281,74,1406,47,88,249,1416,1263,943,1477,39,123,1919,37,167,227,478,405,421,316,335,1375,359,498,173,507,456,40,226,160,927,229,848,6,1174,1107,710,13,480,1249,817,85,80,128,12,48,243,576,199,208,338,1521,1167,282,690,16,362,791,25,435,495,1217,1215,387,36,1620,166,1586,345,698,541,590,277,328,85,862,751,1273,950,817,77,749,198,156,212,404,6,197,425,582,453,59,45,1059,1058,389,178,547,847,670,559,81,1180,220,1338,216,1528,629,601,802,903,207,352,228,29,761,477,161,268,228,647,80,110,402,470,714,439,511,13,70,277,746,492,657,1215,146,201,63,84,1158,1615,513,1182,83,73,60,22,221,888,344,27,205,1344,325,1362,102,1396,1117,426,80,497,458,11,218,165,221,649,524,264,251,617,825,172,1120,931,520,112,1286,818,1464,11,1,83,184,320,152,730,744,409,604,73,1205,411,732,1078,775,334,130,202,716,368,734,794,723,1140,367,222,435,596,566,719,1046,1428,797,470,124,380,1833,180,62,714,1112,772,26,89,445,9,147,76,764,267,1400,6,275,69,292,143,522,376,797,73,136,688,30,417,1835,47,54,19,32,565,85,320,426,771,66,1656,740,75,10,284,23,14,65,719,1719,874,426,599,314,445,796,994,467,49,0,1141,248,957,50,1024,427,696,533,1284,811,89,17,597,463,1501,13,199,701,53,318,7,628,608,147,291,22,518,191,1243,333,88,12,138,363,262,753,467,456,74,1047,15,339,234,612,452,424,340,481,13,4,303,30,908,1069,1018,1584,426,192,304,337,326,1087,406,132,449,1142,279,307,315,1445,113,49,705,120,187,4,798,960,431,214,1051,848,54,845,64,83,1059,813,1390,1008,237,469,156,61,635,1074,1621,523,24,140,141,715,1124,402,400,204,18,452,1107,453,377,467,241,340,35,320,799,680,5,123,43,1614,1774,549,651,163,700,776,65,336,145,426,150,1049,113,1346,434,45,521,729,55,1448,85,1133,1421,375,1398,319,206,606,68,1597,716,1507,963,141,95,72,33,1242,251,448,1337,1132,83,1779,284,58,625,253,1247,344,47,1194,1047,190,538,103,322,652,44,422,53,31,345,1346,27,768,1006,179,447,1318,199,92,364,141,121,276,284,847,462,700,780,360,843,1430,185,69,635,292,413,43,71,240,15,787,379,1353,173,305,227,118,844,632,471,523,1139,8,811,355,811,223,37,267,438,1011,58,39,64,422,167,844,165,80,618,1115,194,547,47,99,639,171,43,246,104,1429,510,127,125,1035,290,839,1060,26,160,31,570,623,80,1246,645,1396,99,543,159,525,211,446,209,885,512,1483,479,716,417,268,583,1467,573,553,95,729,1589,207,67,224,243,426,283,398,612,596,248,282,180,94,405,148,429,37,116,582,32,253,282,832,94,154,338,75,404,651,365,1436,60,266,1163,982,69,958,751,1693,850,1257,1294,429,120,133,741,564,328,315,1268,98,20,14,114,478,20,344,631,1296,24,1611,487,659,355,1336,20,1197,515,13,1165,1007,1403,1473,126,461,431,15,136,730,449,1109,1146,1210,944,158,742,1586,380,1051,41,1250,915,1417,681,642,70,1789,54,161,1568,676,113,287,338,127,1168,615,421,215`;\n\nexport default data;\n","const data = `16,1,2,0,4,2,7,1,2,14`;\n\nexport default data;\n","import { Day } from \"../../lib/Day\";\nimport { average, factorial, median, range } from \"../../lib/utils\";\nimport data from \"./input/day07\";\nimport testData from \"./input/day07test\";\n\nconst parse = (data: string): number[] => {\n  return data.split(\",\").map((val) => Number(val) as number);\n};\n\nconst calcDist = (data: number[], target: number) => {\n  return data.reduce((acc, val) => {\n    const shift = Math.abs(val - target);\n    return acc + shift;\n  }, 0);\n};\n\nconst part1 = (data: number[]) => {\n  return calcDist(data, median(data));\n};\n\nconst calcDistFactorial = (data: number[], target: number) => {\n  return data.reduce((acc, val) => {\n    const shift = factorial(Math.abs(val - target));\n    return acc + shift;\n  }, 0);\n};\n\nconst part2 = (data: number[]) => {\n  const bestFuel = range(3, -1)\n    .map((num) => {\n      const avg = Math.round(average(data)) + num;\n      return calcDistFactorial(data, avg);\n    })\n    .sort((a, b) => a - b)[0];\n\n  return bestFuel;\n};\n\nconst day: Day<number[], number> = {\n  parts: [\n    {\n      desc: \"\",\n      tests: [{ data: parse(testData), runner: part1, result: 37 }],\n      solutions: [{ data: parse(data), runner: part1 }],\n    },\n    {\n      desc: \"\",\n      tests: [{ data: parse(testData), runner: part2, result: 168 }],\n      solutions: [{ data: parse(data), runner: part2 }],\n    },\n  ],\n};\n\nexport default day;\n","const data = `ec cabfe afebd dbagef afbcg feabcd cdef eafdcbg ecb caegdb | ceb ecb febac ec\nacfdg ea baec dgbafec cfebg efa cfebgd dfbaeg egcaf abecfg | bgcdfe ebac cadgf dceagfb\ngfed caefd dcegaf ge daegc bcdag dfagbce cfbead gce afbegc | ceadg edfg gdbca fcead\nea dgfcae feba cae efbcagd cagfb gedcb gbfcad gebca afbceg | facbgde cegdbaf cgabe degcb\ngcbfed bdf cbdfgea fgeabc dcfab caefb db caebdf abde fgdca | fdb fabce dbacf afceb\nbacf afg egfab dcbgef bcegdaf efgbac efcgda fa gbfce gebad | edgba bfacged af fdacbeg\nadgef bagcf cdea adfebg dfgca adfgec cd fcdgbe cdf cdfegab | afgdbe facdg gdfbeac dcea\ncdgeb cd cdb gfecbda adgcbe bcdfag aecd bfceg edbfga agdbe | bdc dbeacg dceabg gcedb\nae cdbeg gefcdb eca ebgfac dcbafeg deag abcde facbd becadg | aec cbaedg aec deag\ngabfc cdfbe ea dbcfeag aebfgc befagd ebfac aeb gaec bagdfc | ea gbadfc dgbfca decbf\nbcad cd cfbge cegabdf fcdeb defabc gebadf fdc adfbe ecadfg | dc fcd egdcfa dc\nbegcda cbf egacb fc ebcaf baefd gabdfc gfce gaecfb acgdfeb | bdegfca cf fc acbdeg\nfbgce dagcbe eafcbg bcgdfe geacdfb efdb dcgaf dge de gfdec | cgbfe bagced daecbgf bfde\nfdgae fce cdeab gcfd fc efdca eadfgb fcgdae efdcbag gaefcb | efbdag fgeda adbfeg befagc\ncfag cadgfb cf cfd cdbgf gaebdc bgfde cgbfead befacd cadbg | gcbda fcd bfged dcf\ngebf edbcga edcabgf cfabed aeg agcfeb fgaec ge cgadf ebafc | abcgdfe gafbce cfagbe bgfe\naegbfcd gbacef bfea bfg efcag cfbge bf fcdega bedgc gbacfd | bcagedf bfea acdbefg faceg\ndcf df aedf ebacf egabfcd fcdbge acfbd adbgc dfabec afgceb | caebf dcf dcf ebcagf\nbgad abcge dbcfgae bcfae gecdab eagcfd ag cgdbe gae bcedfg | adbg gdba ga aeg\ncega begfdca bdcfea febcg bec fbadcg fgbeac ec bfgac fgbed | ec gadbfc cbgfa bgcadef\nfegbac debg bgc cadbg gdefca efbagcd dbgcea dfbca caegd bg | gb edgbcaf gbc cbg\ngbefc badecfg acgeb ecfgba cfbgd bef ef acbged caebdf afeg | gefa ecdbafg gbdfc cegfb\ngbefca gcdba dbfeag ec gbfae becf gdafce fegadcb aegcb aec | gebafc befcga gfadbe cgeab\ncegadf cafg gdeca fdbcae fadcgbe gdc gc cbefdg ebgad fcdea | acdef gbcdef agcf cgbdaef\ngcdbef eagdbc ecbdg afecgb bfc fbecd geabfdc fb fbgd fdcae | bcf cfdegba fb dfcbe\ngafed badfce db dcgb dab dbaeg dgafceb acegb cabedg aebgcf | afdge db bcgaed cbaefd\nbgcda gdfb fecbda gb cbg bafcgd gacbdef bfeagc cbafd dagce | gadec cgb efgdacb gdacb\ncbefd dfegba bcfead db aebcfdg deacf bdf dbac fcbeg geadcf | gbefda efacd bd dfb\nagdfbe gfcbeda egcad cegbd bgafce gcfead gfade acfd ac cea | afdge eac gaefd cdega\nebfad fde edbca gbfdce feag gaebfd ef adgfb bgcfad cbdfgae | gfabdc edf fage cdabe\nbdce cefabdg bafdge afced cd cad badfce gdbfac aefcg ebdaf | ecagf bedc dac dc\ncgebf gba ecadb ebcdfa gcad adgcbfe dbecga ga gbeca eagbdf | ag bfgec ag cdbeaf\ndbcf dgecf ebcgd gbcea gebdcf bed dfacbge gceadf ebafgd bd | db dbe faecdbg dbe\ngdea fed aedbf efadgb de fbega bgaecf gaecbdf egbcdf cdfab | ed cfeabg aged dgecabf\nafebc fdeacb egf cfgb daceg egbcaf cafge gf ebadcfg egfbda | fge afceb eacfg agecd\necfad deabcf cagfe gc degfca dgcf dabcge gac gabcefd ebfag | cga afgce gdfc agc\neac gbaec cfeb acefgb afebg ce dacbg bdegaf egafdc bgceafd | eadcfgb aec ace aec\ngefba afb af gacbe ecbgaf dagfcb feca deabgc fbdceag dfbge | befdcga aegfbc efbcag baf\nbdg ecdgf fbagc ebdafg db cbgfd cebd baegcfd fedcag dcegbf | db eacfdbg bdce bd\ncfeab ebdgca agb ga aecbg cgda eafgdb ebcgdf cbfaegd dgbce | cbdfega ecafb gdac bga\ncaed gcdfa ac bfcedg edagfc eabcfg caf dagcfbe gbfda dfcge | degfacb fbcaged cfa dgafbce\nbgcefda eagdbf acdbe gdfbe abgf aedcfg cedfbg fea fdeab fa | aef bcead fgbdae abfdeg\ncbd cgdaeb gaebd dfceg cgbde cbefgda bfcgda eafbgd cbae bc | baegd bc aceb gbdeca\nfbaegc dcbaf dbcae abcfg adbcegf bcdfga dfa cdfg fgdaeb df | fcgaedb fd fd begcaf\nbcdeg ea fbaegdc eag eafgbc dgaeb bgafdc feda adbfg gdabfe | gdbea eag ea aeg\nbeacfd bead dafce cea edfagcb ea gadfc bfecd aecfgb fcdbeg | ae cgefab adcef aebd\ndcefgb agfdce bgdfe agfdbe fad bdafe ceadb fa fbag dgcafbe | abefd ebfdgac fa dbgef\ncbdfg cgeabfd fe fge bfgdca gfacde becgdf bdef ebcga egbfc | ef bgfcaed egbfc gaebcfd\nadcge fcad bagced cf cef fegcd edacgbf cafegd febgd aecgbf | fec agefdc dacf egcabdf\nfagbd bgec fdcbea be eacgf eba dceafg faebg adbecfg baefgc | gfcaedb ebfga bea fabgd\ndbecfa bfcga begdfa cgdebf ge fge gbcef cegd dcfeabg fdceb | cbegfad eg gdec bgacf\ncae ebcf ce gcfad bdefag fcaeg cgfdbae abdegc acbgef faegb | fegac ec cdgaf bcaedgf\nbcfae cbgedf agdfcbe gdca fgc gcdfba bagfd gbafed gc bgafc | fcg edfbcga feadgbc adgc\ncfdgab fdg dbcfa gf efgdac afgdb decagfb edfbca cgbf abged | fagdceb bdagf cebdgaf edcbaf\nbcefg bafge ebadgfc cfe ec dcgfb bafgec edbgfa caeg dcebfa | afgeb cefbga dcbgf fegba\nfbc gbced edcbfg fb dbgf befgc fgace degabc bcafdeg fbaced | aefgcbd fedagbc bfc fb\ngd gbd eabfcdg egad cgbda eagbc cdgabe feabgc dcebgf adbfc | cadfbeg daeg bcgefa gd\nedafb dagfb agd ecbgda dgbfc edgbcf fcga geafbdc cfdbga ag | gcfa gda gfdebca gda\nedabg bcafgd gacfd dgfcae bfa fb dafbecg edcfab fgbc dafgb | fba fdcgeab fb badge\nebfd gbdaef gafcbe efadg agfdb bf gcadbfe fab cbdga cfgead | fab aebgfcd fb debf\ngeadcf cadgfb ab cbagf acgdf dfcegab adbcge fbgec abfd abc | acfdeg acgfdb bcfga dgcfa\ndacfbe cbga ebdfga bc ecbfadg agfeb ecgfd bfc eagcfb bfegc | fecdab cfegb bfecg decgf\ncgdabf ecdfab ecgf ecfdb bgf febgcd gf gdbef abged gdefbac | afgcdb gefc gf adfcgbe\ncgda gcfedb cbdage aedfbgc cd cgaebf eadbc bceag dbc defba | abgedc cdb cdb fgcebda\ndafbgce agd fcdage gd afecg edgc egabfc efdab dabgfc afedg | beafgc dgec gad gecd\ndbgecf faedbg dgfea dacfge fcaed dagc dc dfc febca abfgced | fedag dfeagc dgfacbe cd\nfbgc gcbadf dafcg gdaeb gfdace bf bafgd defbca bfa gfbecda | fba fb cgfb cfdabg\nabfceg adgfbe cba cfea cbega abgef dbfgca ca cebgd ebgdafc | ac ca acb bca\nbafg decfa feabdg cafbged ga gea fgedb dbcage fadge fedbgc | eacdgb ega bfga cefbdg\ncbafg fe debga bgfea ecfa efb dfbegc afcbdg fbecga dcgbfea | bgdfcae fcbga bgaecf fe\ngdfa eagbc gdc bdfeca cdfbga dg afcdebg cagbd bfdceg fbcad | dgaf dg dgc cgd\negbcdf gdbeafc fcd cafde abfdge adfebc gecda fbead fc bcfa | dagce gdaefbc cf fdc\neca cgafdb afeb gecba febdgca gadfce fcagb ea dbceg cgbfea | cafegd cae ecbdfag cgbea\nge cfbead abefgc acfbe ceafdg fbge abcge badgc gec caefbgd | efbca egc dbgafec dafbgec\ndc gaefc deafgb fdc dfeba adbc efdca dfgacbe fdegcb dcbafe | fcd afecg efcgbda feadb\ndcbfe bfe efdacb afcebg cebda gcefd afgbcde bdfa fb edbcag | gecdf fb bfe bf\necbfa febagc bf dbagfe edgcab fcgdeab afb eacgb ecafd gcfb | acbefg gaebdc cgbf fbcage\nbegcda fcedba gadefbc cgeaf dce bfdc dacfe cd afebd abedgf | ecdabg gdfeba afbcged afgcbde\nae ebcgd dcfgaeb becagd dbeacf afbgc ecbag eca gcbdfe edag | cea becga gbecad ae\ncgbafed geafdc ebacfg cde bdcfg gfced dafe acfeg ed agdbce | daef eafd edc cfegd\nfdceag ecdabgf bfgcd fgdba fag daebg beaf af egcabd daefgb | afdcebg beaf af dfegbca\nbc caeb adgfcb gfbde aedgcf gefabc adcfgeb bgc fagce cfegb | bc cb fegca bc\nagecbd gaefbc gefdc bgfdac bdgca ae age edabgcf decga edab | dacefgb dafgecb ega ae\negbad debfa dfag bgaecf abgdce fba fa cgbefad agedfb cdbef | fgbead fagd becgda af\nbgc edgbfca bfgce agdcfe acgefb efcbd cafeg bg bage bagfdc | gb bgea bgcef dcbef\ngab cfeab gdcea facgbe adbfcg cafdebg dfaceb begac egfb gb | dcgfba bg gb bag\nbgfceda gcafed egfd eadcg abgdce gfaec bdfagc eabfc gf fgc | egdf agdce cgf cafged\nbacfegd egbad adgce adcb dbagec acgfed bag ba ebdfg gafebc | bacdeg badc efgbdac bdac\nbfcdg bdgcfe cfb cb becd gfdec eacgdf bfecgad fbgda cfegab | cbf bfc cb cafbegd\ncebgf gbeda fa fedcab cdegfb cgbeaf bafdegc fgeab eaf gcfa | gcebfd fagcebd af fcga\ncefba eg fecbag adebcg aebcdgf dbagf cgef abecdf egb fgaeb | fadceb bafcegd bfeac gcfe\nacgd fadgb edcfbga afgcbd cdfbe gc bfgdc cfg gfaecb ebgfad | cbdgefa bfaecgd bfcaedg fcdeb\ndgbe aedbcfg bfegdc agcbdf dcgfe fcdgb fed ed efbcad efgca | edgb fgcbd bdge edgb\ngfadc geacf gdf fd dgafcb gaecbd bdcag cgdebf bafd fdbaceg | bedgacf gdebfc fbagced fdba\ndcbefa eadfbcg ab eadcg fegbda dba fgebd gabf gbcdfe bdage | afbg bfcdae bgaf bda\ncbf cf edgcba fdcabg ebgdf gacdb bgfcea cgbdf fbgecda acdf | egdbf fc fbc fdbagc\nebdcgf edgba ef afce aefgdc edf edfag bcagdf gfaebdc gfdca | def edcgaf fdeagc fe\nbdaef fbcgae ae dcae dgcfab fbcda bae dbgfe badcgef dfeacb | aeb cbgfae bafced ae\nebacf gebfa gbfaed edfga bg ebdg edgacf bdcafg gba cgabefd | abg edgb dgbe fecabdg\nfaged ba gaefb abcf abfecg gefbc edagcb dafbcge gab cbfegd | ba gfbae gbadfce cabdgfe\ndbag cgdbe ebg dbaefc gebcfa geabcd daebgfc gfdce dbeca gb | abdg bg geb gebadc\nbcegda egcd ecfgdba edagb dgfbea abcfd cg bgacd ebgfca gcb | efgabc bgeda degc egadbc\nbagecfd geadbf debaf dfge abegf fecbga fbd df abfgcd edabc | cbefgad faegdb dfebga df\necdabf gbdfa eabfc bedc cdf gcfaebd cgbfea cd dfagce abfcd | dcaegf becd cd dbfcea\negac fdabce faedg fdceag gfe dgafb defac daecfbg ge bgdecf | geafd fcdea cedgaf gbfceda\nfacebgd ebcgaf afecdb eba egaf ae cdegb agfbc bdfcag bgeac | ecgbd egfa ea fgae\ndgfbce dfa fbedga bgadf cdgab af gefa aecdbf ebfdg bafgcde | febdg fega acbfdge abefdg\nbcdae aebcg dacf gefbda cbefd badcegf begfdc adb ad efcbad | ad adcf acfdbe bad\nfgbcda dgcfeab gdcae fabge dgb bdfgea bd adbeg bceagf fbed | bgd db db bd\ndgb cbfgaed bdeafc bfacdg gbdef gd agde adfeb dbgafe fgceb | egbafdc bagefd egda agde\nfegbdc eabfgd edfbgac ad fdgbe bade agcfe gadef dfa dacfgb | da eadb dgfae ad\ndbfag fbgac adfeg cfdb gdbeca dab fcabdg db ebgfca gecabfd | adb bgceadf dfaeg cgaefbd\nebgca ecdbfa bcafg ge cgbefad agde edbca geb ebdcgf dgabce | bdcfgae ebg ge bge\ngcadbef fgbd gcd gd aecgb bcdefg afdebc cbfde afcdeg dcebg | gcd dgc gdc befacd\nfdabge ab gdeca fagcbed gba dgbefc eafb bgcfda gdbae fgdeb | adceg abef efab eafb\ncfgdba cd abecd cfbadge dcb adbfe agfbde bcafde egabc dcfe | aecdb defbag eadfbc dc\ndgcaeb acfdbg ge dgecfb gdbecaf gace aedbf adbcg dge gbdea | edabf cgdfbe eg dgaeb\negbfac ceg geacd ecbda ebgd dbceag dbgcfea dbacef gadfc ge | egc dcbaegf acfgd aegbdc\ngd fcgbad abegdf gbed feabcd acdfgbe efacg gfead feadb fdg | dg egcfa aedgf ebdcaf\ngf defcg gefb gfecdb fgc ebacgfd gbdcfa facedb ebfcd degca | efbg eadbfgc fgc fgecbd\nacgfb febgda dgfabec fa fab gdeacb eafc cbgdf fbegac ebgca | af acef beagfc fcbga\nfb fbec dgacbef fagecd fabdeg fbdcg dgecf fegbdc bdf bagcd | cebf fb efcb fb\nebgfc cbefdg adgfbc edbfg gadfbce fbd adebg fd gbfeac efcd | fd dfegbca bgecfa df\nceafd abdfc dbgcf gdaecb eabcdf cegfda abfe abd ba cbefadg | ab edfac fbea cegdfab\nbgdce aedfbc agecb egfcad ab abe cafge gbefca bfcgaed abgf | acbeg cgeabf ecafgd fdgabec\nfaegd eb fabe efbdag egb fgbed cbgdea dcfgb cbgefad gfecad | adbgcef agfed ebg fbegda\nagbcd cfgabe gca dfcegab agdbf gc gdfc dbfcga eacdb faedgb | cbafdg abdce fdbga cabfgde\nbdaec bfgde ga agdbce gdca gceafbd abdeg gae cfabeg edacfb | deacb adgbcfe becda ecagdbf\nefagdcb edgbac bfcea cfagb dfecb bae fagcbe aefg ea cdafbg | afge afge dcebgfa fega\nbgaec geadb fgbdec gefdba fbacg cbdage aedc gce dfaegcb ec | ecg adec acfdgbe cdae\negad dgcbf fcbeag eg cgaedf ceafd cbfead cegfd acfgbde cge | fgdec afdbce fbecda gefbcad\ncdegb dbea gbdcae dgfecab febcga cbaeg ed fdbgc cde cadfeg | dce ecd adgbec gbacef\nefbgdca cbafg gfdbce egbafd ecbaf ag gadc abgfdc bag gcfbd | bcgfd ag gebafd gabfed\ngfac gfdbca gba degbc bcfad agdbfe ebdgcfa efcadb ag bdgca | aebgfcd afecbd gab acgbedf\ndfeagc ecfd abegdc bcdfga eca geacf fgacebd gfeab ce dgcfa | bgcfda egcaf dfbcaeg agefb\nefbdag ecgbaf dcgafb dacbe fdgacbe dfgc df fda acbdf cgbfa | fda afbgc cdabgf df\nedcagb bdgac eagb ga bcgfd ecdab acgefd cafedb abgefdc dag | ag gbdca ga bgcda\ndafbecg cgead fcbd agbedf db bde becad cbeaf bfgeac dfbeca | abgefd fecba fbcd cbdf\nedg bfdace agebc ebdcf dgfabe cbged dg bgdefc gdcf bdgceaf | fcgd fdcg fdcg ged\nfcabd bcde dfcbaeg efdbac cfbage bdfag fadec afecdg cb bca | cfdea dabfec cbafeg dafce\ngbeafd agcb cefbg gdaecf bg gbf bcdfe fceag bagcef afecdgb | gb efgadb cgab caefg\ncegbadf gaed dcafeg feacg gd fcbagd dgfec bfegca gcd cebdf | gd gd aecfdg cgd\ngfecd gedba dceagbf fdage gedafc afd fcbgad becdfg feac af | cgdeafb fgcebda edgaf gfedca\nfdbgcea fedbgc agdcfe debcag deba bcgde dga bfcga dcabg ad | dcagb cfgbdae dcgebfa dbae\nabd debcfg caegdb da bcafgd acdf ebgfa fagcedb gabfd fbdcg | bgefa da cgdefb edcgabf\nea fgace egafbc dfegabc fbae fgcbe cegbad ega dbcfge gdacf | bfea cgdfa ea bdacfge\necba eadcg eb edb fbagd gdcebf gbceda dacfge gbaed fagdbec | aefgcd bdceafg gbfdeac afdgb\ned dgeb dfacbg dbcgf gbdcfae efbdgc dec deafcg bfaec efdbc | fbgdce gadbfec fdgcbe gadfce\ndgec gafbcde bcgdfa dacefg efcda cegaf acd cegafb cd eafdb | gaecdfb fcdgae dc gdcebaf\nfdbgca abfc cbadg cf fcg edfgb cdgbae cgaedf abcefgd dcgfb | badegc cf adgceb fc\neb fgcde bafcgd cbfeda cegdba becgd bce baeg dagcb ceabfgd | adgceb debgafc be gacdb\nebcafd dgfeb befdgca gce egabdc adecb egdcb cbegaf gc cgda | bfaedc gbecaf egc dgbecfa\ngafdbc cfaeg aecbd efbd fcegadb fcb bacfe cagebd bf fcbade | fb bcf bdef gdeacb\nce gedc afbdgce abdfc dcbgea cae abcde afgbec edgbfa bgade | dfaegb baced cfadebg cea\nbagf bge dfgce fdbae egadbf dgbcae fdgbe fabcgde gb facbed | bfga gfab bg gbe\ncb fabc cfedb fdcge fdbeca gedbca bce abgfdce adfeb ebfagd | cabfde abfc ebc ebcfd\nedbf bafeg cadfgb cgeab fba bf agfed cgbfaed fgacde gfbaed | cedbagf bf bf fba\nbceadgf begfac gfedab gabdcf cegf caf efgab bcade cbaef fc | efgc fbcgdae gbcfda bdgafe\nbafdg agedf dbgecaf fge dcefa bafcge ge eafbcd gcdaef egdc | eg fdcebga ecgd egf\nafbdeg abfceg ecg afgeb bfce fgcae fcadg gcdebaf ce dbcega | befag dabcgfe eagbdc egc\nfbga dabeg debcf dgafbe fea bfdea gdbfcea agcfde fa egbacd | edgfac eaf fa fae\nbafec cf cfadgb faebd bcf beacg eadgbf bdceafg cdfe dfabec | fcb afcdgb cfb bfcae\nebfacd geafbc cgdfbe gabfd ceag cg cabfe bgcfa bgc fdeagcb | febdgc gbc gc dcefgab\negacf cadb efdcab cfedb gfabde dea feadc decbgf fbadecg da | gcfbed acbgdfe bcedf becfad\nbfgcad cebaf fabgc afgbec egfb fe abdce efc fdagce baedcfg | fec gbfca fe bdefacg\ngbfedca bega bcdef fgeadc bgcad ea bcfgda gdcabe acdeb ace | ea dgbcae afbdcge ae\nfcadebg gbecd adc fdbag bdagc aedbfc ecgfbd ac bdceag geca | eacg cgae adc ca\nafdgec cfgdab fbedag eabcf agb cgfdeba dgeb gb afged abegf | bg fbgea badfge gdeb\nedgab adfcg cedabgf ce edbgcf daecbg ecd dgcae ebac fbgaed | ec ec ecba eagbd\ncebf eadbg bc degfbca cbg gcfbda agfce bgcae cbgfae efcdga | cbef badcfg gcb bcfe\ncafbde cbfg abgef gacedf gf edbag faedgcb bfeac gbefca fga | gcfb fceab gaf beadg\nedfab feag dag bgdfc adgbf gbfaed ga egdcabf cadgbe bacdef | gefabcd aegf afge eagf\ncdfeab cdg efdbc fcbdga dcgaebf dbge eagfc debfcg gd cgfde | fabcgde dgc egbd cgd\ncagbef gcb fbgead cfdg cbdea bdegc cg ebgdfc fgedacb bdgef | bfegda gc gc cfegdab\nedcgf be feagcd dbcfa ecbagdf bfgcea cbfged fedcb feb gbed | bef fdceg egbd bfe\negbf fdgcab dbage edafc degabf fgd gaefd cbdage afedbcg fg | gdf acebdgf gdf gafdeb\nacfegb cabed fbdacg afb gafec gadecbf cbfae efbg bf egdfac | fegb abf cebda egfb\ncaegfd faebcgd dfeag cg cafbge fbdega gca ceadg caebd fgcd | gc agc gafebc fdega\nfbgda dfebg bde eb fgdce dfegabc edcfba egbc cdbgfe faegcd | be eb dcbgfae gadbecf\nfbgadc efac ce caedb badfce bce ebadg bdgfce cdbfa fbcagde | ec ebc efac ecb\nedagcf ecdga facbeg fcdge ca begad gca bdgfcea cgdebf afdc | adcf fdgaec edcgf acg\nfeacg cdfb eadfbg adcbfg bf bfg aecgdb fdgceab gcdab bcafg | gfb bcfag fb afceg\nfbdgea fcae abgecdf deafg gfceda gec cgdef gbdfc ec aecgbd | caef afec dfcgae ecaf\ngeadfc afbcegd eadc abdfeg ac agdfe cgefa gac gfebc cgbfad | faedg gabfde ca eadc\ndcaeg afc ecgf edbcag fcdeba gcfdea abgfd adgcf cf dcebfga | dfegac fceg facdg afc\nfbacged egc ecfgb cegadb efdg eg efbdc bcfga deabfc bfcegd | ceg fgedbca fged eg\nbfceag egbcad debgaf dbegf febga edfgabc cdfeb gd fdag gde | egfdcba gaecfb ecdfb dagfbe\neadfgc gc bgdfcae bgcdf fbdeac cadgbf cgd gebfd badfc cagb | gc agcfed efdcga gefadbc\ngcbe feagb caegf adfce agc cg egfbca dafbeg acfdgb acdfbge | beagf gcdafb egabf abfegd\nabfce dafcbe eg gbe fecgab agec eacgbdf gcbdf fcegb gdbaef | bgedfa geca eg bgfec\nbfadg befdgc defgb cafgeb de fced edg adgceb gacedbf bfcge | efcd bgceda de de\nefdcba efgcdb efcbd ba bae cbaf geadc afgbde decab bgecdaf | cfba daegbcf dbafec bcedgaf\ndfeab eb cgfbaed aecfgd efadgb gcdefb agbe cdbaf bfe edfag | dgeacfb cgdebf be bgae\ndcfbea dagfeb dfgceba agfdc gcef gecfad abgcd deafc gdf gf | bgacd cefg efcg dfaceg\negfdb ecbgd fade cdfbega bfaeg gfbacd gdf df becfag dfabge | dgf geadbcf gacefdb df\nfcdbga egdabf ca bcdfa cdbef befdgac gfbda acgf adc bdgeac | aebdgc gadbfce cda dagfb\ndgce adfbecg eafcdb cfgda cfage gbafd ceafgb fcd dc aedcgf | egdcfba fcd fcadg gdbcfae\ndae dacgfe fceab fcabge cbdeg daecb ad bcadef dbfa gefcdab | geacdfb egacfb fdab da\ngcebf cdebaf gafc agbecf daebgc gcfabde cg ecg efacb edbgf | cgafdeb cegbda cg dcgeba\nbefcag cefdga ebaf ba bgfcdae fcaeg ecbdg cab fdbacg aecgb | bafe cfgbda geacb acebg`;\nexport default data;\n","const data = `be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe\nedbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gc\nfgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbg\nfbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cb\naecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgea\nfgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcb\ndbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfe\nbdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgef\negadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgb\ngcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce`;\nexport default data;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Day } from \"../../lib/Day\";\nimport { intersect, merge, range, sub } from \"../../lib/utils\";\nimport data from \"./input/day08\";\nimport testData from \"./input/day08test\";\n\ntype Batch = {\n  input: number[][];\n  output: number[][];\n};\n\nconst chars2nums = (pattern: string) => {\n  return pattern.split(\"\").map((char) => char.toUpperCase().charCodeAt(0) - 65);\n};\n\nconst parse = (data: string) => {\n  const rows = data.split(\"\\n\");\n  const patterns = rows\n    .map((row) => {\n      const [input, output] = row.split(/ \\| /);\n      return {\n        input: input.split(\" \").map(chars2nums),\n        output: output.split(\" \").map(chars2nums),\n      };\n    })\n    .filter((pair) => {\n      return pair.input[0].length > 0 && pair.output[0].length > 0;\n    });\n\n  return patterns;\n};\n\nconst part1 = (data: Batch[]) => {\n  const numHits = data.reduce((acc, batch) => {\n    const uniqueSegs = batch.output.filter((seg) =>\n      [2, 3, 4, 7].includes(seg.length)\n    );\n    return acc + uniqueSegs.length;\n  }, 0);\n  return numHits;\n};\n\nconst SegMasks: Record<number, number> = {\n  0: 0b1110111,\n  1: 0b0100100,\n  2: 0b1011101,\n  3: 0b1101101,\n  4: 0b0101110,\n  5: 0b1101011,\n  6: 0b1111011,\n  7: 0b0100101,\n  8: 0b1111111,\n  9: 0b1101111,\n};\n\nconst renderDigit = (digit: number) => {\n  const segs = SegMasks[digit];\n  let str = Array(5)\n    .fill(\"\")\n    .map(() => [...Array(3).fill(\"·\")]);\n\n  range(7).forEach((i) => {\n    const seg = 1 << i;\n    if ((segs & seg) === seg) {\n      const cell = i * 2 + 1;\n      const row = Math.floor(cell / 3);\n      const col = cell % 3;\n      str[row][col] = \"#\";\n    }\n  });\n  const scaledStr = Array(7)\n    .fill(\"\")\n    .map(() => [...Array(6).fill(\"\")]);\n\n  [0, 1, 1, 1, 1, 2].forEach((srcCol, dstCol) => {\n    [0, 1, 1, 2, 3, 3, 4].forEach((srcRow, dstRow) => {\n      scaledStr[dstRow][dstCol] = str[srcRow][srcCol];\n    });\n  });\n  return scaledStr.map((row) => row.join(\"\")).join(\"\\n\");\n};\n\n/*\n aaaa     ....     aaaa     aaaa     ....     aaaa     aaaa     aaaa     aaaa     aaaa\nb    c   .    c   .    c   .    c   b    c   b    .   b    .   .    c   b    c   b    c\nb    c   .    c   .    c   .    c   b    c   b    .   b    .   .    c   b    c   b    c\n ....     ....     dddd     dddd     dddd     dddd     dddd     ....     dddd     dddd\ne    f   .    f   e    .   .    f   .    f   .    f   e    f   .    f   e    f   .    f\ne    f   .    f   e    .   .    f   .    f   .    f   e    f   .    f   e    f   .    f\n gggg     ....     gggg     gggg     ....     gggg     gggg     ....     gggg     gggg\n  6        2        5        5        4        5         6       3        7         6\n*/\n\nconst decipher = (pattern: Batch) => {\n  const src = [\n    ...pattern.input,\n    ...pattern.output.filter((x) => pattern.input.indexOf(x) > -1),\n  ];\n\n  const d = Array(10);\n\n  d[1] = src.find((x) => x.length === 2);\n  d[4] = src.find((x) => x.length === 4);\n  d[7] = src.find((x) => x.length === 3);\n  d[8] = src.find((x) => x.length === 7);\n\n  const len6 = src.filter((x) => x.length === 6); // digits 0, 6, 9\n  const _abfg = intersect(len6[0], len6[1], len6[2]);\n  const _bg = sub(_abfg, d[7]);\n\n  const len5 = src.filter((x) => x.length === 5); // digits 2, 3, 5\n  const _adg = intersect(len5[0], len5[1], len5[2]);\n\n  const _g = intersect(_adg, _bg);\n  const _b = sub(_bg, _g);\n\n  const _d = sub(d[4], d[1], _b);\n\n  const _a = sub(d[7], d[1]);\n  const _f = sub(_abfg, _a, _bg);\n  const _c = sub(d[7], _a, _f);\n  const _e = sub(d[8], _abfg, _adg, _c);\n\n  return [_a, _b, _c, _d, _e, _f, _g].flat();\n};\n\nconst applyCipher = (sequence: number[][], cipher: number[]) => {\n  return sequence.map((segments) => {\n    const segs = segments.map((seg) => cipher.indexOf(seg));\n    const mask = segs.reduce((acc, val) => acc | (1 << val), 0);\n    const digit = Object.values(SegMasks).indexOf(mask);\n    return digit;\n  });\n};\n\nconst getOutputDigits = (batch: Batch, cipher: number[]) => {\n  return Number(applyCipher(batch.output, cipher).join(\"\"));\n};\n\nconst part2 = (data: Batch[]) => {\n  return data.reduce((acc, row) => {\n    const digits = decipher(row);\n    const decoded = getOutputDigits(row, digits);\n    return acc + decoded;\n  }, 0);\n};\n\nconst day: Day<Batch[], number> = {\n  parts: [\n    {\n      desc: \"How many times do digits 1, 4, 7, or 8 appear?\",\n      // tests: [],\n      tests: [{ data: parse(testData), runner: part1, result: 26 }],\n      // solutions: [],\n      solutions: [{ data: parse(data), runner: part1 }],\n    },\n    {\n      desc: \"What do you get if you add up all of the output values?\",\n      // tests: [],\n      tests: [{ data: parse(testData), runner: part2, result: 61229 }],\n      // solutions: [],\n      solutions: [{ data: parse(data), runner: part2 }],\n    },\n  ],\n};\n\nexport default day;\n","const data = `7656798786535699986544456789569432012478910965431019876545456789456789769876598765467899898999876545\n8787988665323788999432346797698764123567899876542198765634365695345698955987679879878939767899865434\n9899876543212767898821235789789873294568976987643239874321254789234567943199798989989321656789654321\n3923997654102358987650124599899964989879465698654398765410123892123459894098987699995210345898765432\n2399898763212567986542235678989879878989354798789987654324234589019598789987676579874321256789876543\n1988799874323478987653446789876999868990123459898998765765365678998987678976543456965632369896988656\n0976598765434599998767556799985987756989244567987899876887456989987654567895432345986793578945699788\n1987439986569987899879677899999896645678955698976786987899567898996543456789321266799989999632129899\n9876521987698976989989788978998765534569766789865545698987678967987632389898735477898978789549098999\n9985410198987894577899899769987654323899987898754324569698789659876543678987649678987656678998987988\n9894321239976423456789965456976543212678999989767945789569896543989654579398758789876745567897656677\n9765432547985313345678976567987652104567893979879899893498999932198775691239769895995434456789545466\n9876557656983201235689987679876543213479932867998799912987897893249886789349878934987322345695435345\n8987698869874342345678998789987754328989421359897689909875456789345987898767989123976510656789921236\n7698799878965656756789109897899876567893210498766567897654347897656799939988991034985431267897810145\n7569944989876767969897999956798988878954321987655428989543278998767892123999432549997556348976521234\n6457123496987898978946789545987799989765459876543219878954469999878999019876553998998987899765434546\n5321012345698989989235679939876546999897597987985434569767599898989898929987969887899298969876545856\n7432345957789679892134567898765439898989986799876568978978989787898767898998879756789109456987956767\n8543469898896598743547678929899598787678965343987678989989876676789656987899998645899212347999897878\n9986598789987679654656789219988987676567894212499789993298985565696543456789865435678923456798789989\n6797987678998798765789898998767987544456789101239897894987654434589212347999876566789894567987678991\n5679876567899989876899987897658976432345678992945956989999432125679101238976989678998789679898567890\n4569875478789878987999876896549865421236989889799349878998943434678912347895498789765678998674346791\n3498764345678967898998765689432976532456898767678998767897894545789323556789329898654989876521235689\n4598854234569656989999764567941098743568999854567987654646789956896434768995434986543244987430134578\n5986543145678949876987643458942987654567987543679898743434597897987949989876949875432123986541245679\n9876543266799521965698754567894599778978987654598765432123456798999898999989898764321037897674346899\n9987654777895439874598765678985679899989398767679876541012345899998787899898789975542356798765487998\n9899875688976598753249876789876789998790129878789988652123458923987656788789654986753477899877678967\n8765989789987699842137989899987999987621245989899876543234567899876545634689543798769998998989789349\n9654499894398987652025698987698999876535367891998987654345678998765432123678932659898789987699893252\n8763210943239876543434567896539899987676498932987898765456789429876321014589991045987678997556989101\n7654329994125998754545678997645789699887569549856949987568993212987432345678989239876569895445678912\n8765498789034569875697789789856789543997678998769432198979894101298543467899878998765456789334578923\n9876989678946789976789895678977898432398789769878945239989799212999698578912567899654367890123489934\n2989878567897899987896986999898976521349898954989654349997678929886987679543489998767898921234567895\n1398765457789998798955699888789965432499987893498765498956567898765499889694678989878999432345679987\n0129874345699876549544598765679876549987976792989976987843456789874323996989989876989896587656789598\n9999985234789998632123798654578987698956985889876989876532677898765412345678999655495789698987896499\n8789892145678999321035987573237899987645234578965695997544788989974323496989998743234678919198997989\n7679789234567895492129876432056789997632123489654524598675699879865434789998987654345699909239789765\n6545678945698976989298765432178999876543234567943213469988789767987545678967998765456789898945698873\n7434567896789989978919896543469109998765445678932101979899895656997676789359889887689896787897987432\n4323458997898999869923987654569298999878576789543219898778954349898789891298763998799985656789876541\n5312367899937893998899999865678987895989687897694397654567895298789895990197652129898774345898997632\n4101456789546912987698999876989656793298798998989986743676789989643934989987642034997654234567898843\n3212345678959329898587899987898945689999899999879765432345699876542129976798543126989762104567899956\n4345696799998998765476789998967534577899987895469874321234789987659298765987654234578973213458999767\n6568989899987897654345678989754324566799876789355985432345678998998999654598987545699765454599998978\n7678978999976789543234569876543213345689989893234797645456889439987998963239987656789877667678987899\n8999867898765679652165678965432101234569998932145698776567899929876567892198998767891989788989976789\n9987954569654568969234699876543232345678987643458799897678999899865456789987589878932399899491265679\n9876543498963457898765789988664655457789398756899987998789989798954345899876476989543459954310124567\n9987632987652346789896998799765789868995459977899876789899878687993256798764345797654598765521234678\n9876521098541545678987897679876892979876569998945985456998765566789129987543254699987679876672347889\n9965432987630238989798934567987910989997678949439876567899654365678998999652123589999789987783456791\n9876549998321347897659323569999891999989989239323987698998721234599987898991012378999895498894567892\n9987678999543656789543212678998789898776590167919998789987650123499876987989423467899974349765678943\n9998799987657787899952104567987675797654321257898899899998743235789965765879436567899753267998789954\n8999893498767898999843212689978534689895592346987657978999656397897654554569945688987654379439896896\n7893912349898999789754327898767423576989989587996543567898787456899753543567898799998765998921945989\n6992101999999787689868936987653212345678978998989921456999899567997652101478949896989879887890239876\n4789219878997678545998545699743101234679567899878892367894987678976543212349932945678998776789399765\n3698998969876543434597656798656212356789456898656799468963298899987954524456891234569987675678987654\n4567897656998642323498769898768923487892345987545678979654359956999898765967890123498796454569898743\n9878998549876531014569899999878934598901399876534567899767897549898789876878921356987654343468789654\n6999989734988542123789989987989765679212988765423489939879965439767698989999932349896543232345678965\n5569878921987656245699976596799896789349876544315678921989976599654567898789865498765432101234567896\n4398767892398767656897985435678987898456985432101789439896897988773456987678976599886543272345678987\n3249656789469898967956798546789498987589996563234599598765789876562349876567897989987654365456789498\n1099545696578999898943987657892399798678949764345678997654678954341298765468999978898765566567894349\n2987656789689998789992398967901987639989434995696989896543219653210398874345698766789876678978943234\n3598967998799987689989459878929876525697549879987898789674598954331987543246987645678999899999854395\n4599878959899876578979967999698765434597659867899987678989987895567998632123498932345678989989765989\n5789999945998965464767899989569876546789797654989899569899896789789876541012349853456889879878979878\n9899989896987654323456998778457998787897987543676789456798765678999985432123459766567996767569998765\n4999878789998965434567897654349879898956799432575994349987654567899986545764569877678965453458987654\n3499765678999876575678976543298768939345698921434893298798543456798997656878978988789654312357896543\n2987654567893987689789987652129654321234997890126793129654212367897798767989989799898765501246789432\n1098743458932398789899878761098743210129876789237891019876523458965639879392495678959876712657998321\n3149894967891299893998765432129874321298765678945992323987434567894322989101234569545984327767897210\n4234989898932988992109878543299965452987654567896789456798765898943210993214345778934995456778976521\n4349878789549876789399989665989976769876543456989896567899876789765329865765478989129876568989987432\n5499865678998765678989998789876897998765432345679987678978987898765439876876568993299987679294598543\n6987654567999896789878999896545789999862101476789298789767898919878656987987978999989898989012999656\n9877783456899987894767899989434567987654212388990149897658999423989968998999899998876789992129898767\n9966432346789498943458998765623478798765323499321234998767989434599899879998798987645698989298769898\n7654321356894359954569987654310145679876434578935345999878978995698789965987657893434987678987654929\n8765210897953267895678998765321234589987547699549656789999656789987679954297645932129876567898943213\n7654326789943124999789989876432345891098678789698767995432345789876568892109434894298965458999652101\n8987534567891023988999876998763456789999789898789989654321996999987466789298746789987655357898943219\n9876545689942139877898765987654567996799899999896799765439889898994345678987657899999543234767894398\n6989876789543497766799954398965879345678958999989898976598776787898766789998789998998942123456789987\n5496997897654596545698799239986789234589546789878987897987665876799987897899899887897897545678999876\n4355698998965987639987678992197990145678935698767876799876543454689998956789998786956789656789678995\n3234579879896799998784566789298921266789123987656385689965432343467899345678987654545678987894569984\n2165689954789899876543645878999432378891012396543234799876521012378943234567898763234567898943298765\n3989798765679998765432124567896545989932123987654125689987632125489762123478969974345689989432109976\n4599899876789239854321012679998656798765434598785434578987654334599873234589659865456799876543413987`;\nexport default data;\n","const data = `2199943210\n3987894921\n9856789892\n8767896789\n9899965678`;\nexport default data;\n","import { Day } from \"../../lib/Day\";\r\nimport { colorString, range } from \"../../lib/utils\";\r\nimport data from \"./input/day09\";\r\nimport testData from \"./input/day09test\";\r\n\r\ntype Data = number[][];\r\n\r\nclass Pt {\r\n  x: number;\r\n  y: number;\r\n  val: number;\r\n\r\n  constructor(x: number, y: number, val: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.val = val;\r\n  }\r\n  isSamePos = (other: Pt) => this.x === other.x && this.y === other.y;\r\n  isEqual = (other: Pt) => this.isSamePos(other) && this.val === other.val;\r\n}\r\n\r\nconst parse = (data: string) => {\r\n  return data.split(\"\\n\").map((row) => row.split(\"\").map((s) => Number(s)));\r\n};\r\n\r\nconst getNeighbors = (data: Data, pos: Pt) => {\r\n  const [w, h] = [data[0].length - 1, data.length - 1];\r\n\r\n  const coords = [\r\n    new Pt(pos.x - 1, pos.y, -1),\r\n    new Pt(pos.x + 1, pos.y, -1),\r\n    new Pt(pos.x, pos.y - 1, -1),\r\n    new Pt(pos.x, pos.y + 1, -1),\r\n  ]\r\n    .filter((pt) => pt.x >= 0 && pt.x <= w && pt.y >= 0 && pt.y <= h)\r\n    .map((pt) => new Pt(pt.x, pt.y, data[pt.y][pt.x]));\r\n\r\n  return coords;\r\n};\r\n\r\nconst isLowPoint = (data: Data, pos: Pt) => {\r\n  const val = data[pos.y][pos.x];\r\n  const neighbors = getNeighbors(data, pos);\r\n  return neighbors.every((pt) => pt.val > val);\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst visualize = (data: Data, lowpoints: Pt[]) => {\r\n  data.forEach((row, y) => {\r\n    console.log(\r\n      row\r\n        .map((char, x) =>\r\n          lowpoints.find((cell) => cell.isSamePos(new Pt(x, y, -1))) !==\r\n          undefined\r\n            ? colorString(char, 33)\r\n            : colorString(char, 34)\r\n        )\r\n        .join(\"\")\r\n    );\r\n  });\r\n};\r\n\r\nfunction findLowPoints(data: Data) {\r\n  const [w, h] = [data[0].length, data.length];\r\n\r\n  const lowPoints = range(h).reduce<Pt[]>((acc, row) => {\r\n    const low_x = range(w)\r\n      .map((col) => new Pt(col, row, data[row][col]))\r\n      .filter((pt) => isLowPoint(data, pt));\r\n\r\n    return [...acc, ...low_x];\r\n  }, []);\r\n  return lowPoints;\r\n}\r\n\r\nconst part1 = (data: Data) => {\r\n  const lowPoints = findLowPoints(data);\r\n\r\n  // visualize(data, lowPoints);\r\n  return lowPoints.reduce((acc, pt) => acc + (pt.val + 1), 0);\r\n};\r\n\r\nconst dedupe = (array: Pt[]) => {\r\n  const output: Pt[] = [];\r\n  array.forEach((item) => {\r\n    if (!output.find((other) => item.isEqual(other))) {\r\n      output.push(item);\r\n    }\r\n  });\r\n\r\n  return output;\r\n};\r\n\r\nconst getHighNeighbors = (data: Data, pos: Pt): Pt[] => {\r\n  const n = getNeighbors(data, pos);\r\n  const highNeighbors = n.filter((pt) => pt.val !== 9 && pt.val > pos.val);\r\n\r\n  return dedupe(\r\n    [...highNeighbors, ...highNeighbors.map((pt) => getHighNeighbors(data, pt))]\r\n      .flat()\r\n      .filter((x) => !x.isEqual(pos))\r\n  ) as Pt[];\r\n};\r\n\r\nconst part2 = (data: Data) => {\r\n  const lowPoints = findLowPoints(data);\r\n  const basins = lowPoints.map((lowPoint) => {\r\n    return [lowPoint, ...getHighNeighbors(data, lowPoint)];\r\n  });\r\n  return basins\r\n    .sort((a, b) => b.length - a.length)\r\n    .slice(0, 3)\r\n    .reduce((acc, basin) => acc * basin.length, 1);\r\n};\r\n\r\nconst day: Day<Data, number> = {\r\n  parts: [\r\n    {\r\n      desc: \"What is the sum of the risk levels of all low points on your heightmap?\",\r\n      // tests: [],\r\n      tests: [{ data: parse(testData), runner: part1, result: 15 }],\r\n      // solutions: [],\r\n      solutions: [{ data: parse(data), runner: part1 }],\r\n    },\r\n    {\r\n      desc: \"What do you get if you multiply together the sizes of the three largest basins?\",\r\n      // tests: [],\r\n      tests: [{ data: parse(testData), runner: part2, result: 1134 }],\r\n      // solutions: [],\r\n      solutions: [{ data: parse(data), runner: part2 }],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default day;\r\n","const data = `<({<[(({(((({(<><>)[[][]]}<<()>{{}}>)(<{(){}}((){})>))<[((<><>){()()})[(<>{}){[]{}}]]>){{(({[]()}<[][]>\n{<({[[<<{(<{(<{}()>([][])){<<>}[<>()]}}[<(<>()){()()}>[[(){}]({}())]]>{({{<>{}}[<><>]}<{()<>}{{}()\n{{<<<[<({[{{<({}())(<>{})>(<()<>><()[]>)}<([<>{}](<>[]))<{{}<>]>>}<[[<<><>><[]()>][[[]{}]{{}}]][{(<>(\n[[<<<[([[([<(({}[]){{}[]})><{([]<>)[(){}]}[{()[]}([]{})]>][({({}[])<[]{}>}{[{}()](<>())}){(([]{}){[][]})[\n{((({{<[(((<(<()><()()>)>[{<[]()>{<>{}}}{([][])<[]()>}]){(({[][]}{()})(({}<>)[<>{}]))({{()<\n[[[(({[<<[([[[[]<>]{[]()}]([{}()]{{}{}}]][{[()()]{(){}}}(([]())<{}>)])][{[(([][]){[]{}})]<{(()<\n{<[{[({<{[{[<[()<>]>({[]<>}{[]()})]}{[([<>{}]({}{})){([]{})}]{{<{}{}>}{<()<>>(<>{})}}}](([{{(){}}<{}{}>\n<{({{[(({({<[[[][]]]{[<>()][{}()]}>((<{}<>>))})(<(<[{}[]]({}<>)><({}<>)>)[[{()<>}{<>{}}}[{[]<>\n[<[[[{<[([<(<<<>{}><(){}>>(<[]()>)){<<{}<>>[()]>[<[]<>>([][])]}><<{[{}()][{}[]]}<({}{})>>({{{}{}}}\n{[[{<(<[{[<(<<{}{}>{[]()}>){{(()<>)[[]<>]}}>[[[[<><>]<[]{}>]]]]}({{{{([]<>)[[]{}]}}{{(()[])[[]{}]}}}}((<(<<\n<[([({<({(<{[[[][]][<>()]][<{}[]>]}[{(()())<{}{}>}<({}())(<>{})>]>{(<<[]{}>>{{{}<>}[[]<>]}){{([]\n{<<[<(<{[[<[{[()[]](<><>)}{<[]{}>(()[])}]<{{[]{}}<{}<>>}([[]()]([])))>(([[<><>]]))]<[<{{[][\n(((<<([[([<<[(()[]]<()<>>]<(()[]){{}[]}>><<[{}{}](()())>{<()()>[{}()]}>>])(([[({(){}}<<><>>)[{{}[]}[{\n[<{([[<(<<[[([<>[]][<>()])(((){})([]()))](<{[]<>}({}())>[<<>[]>(()[])])]{[((<>())[{}()])(([])((){})\n(({<{<([[[(<(<[]()>{<><>}){[[]()]{{}<>}}>)]<([<{()[]}<<><>>>{{<>()}{[][]}}][<{[]<>}<{}()>>])[<{\n<<<<[([({{(<[<<>{})]<[[][]][{}{}]>>[<{{}()}[[]<>]><[[]<>]{[]()}>])}}<(<([(()())({}())]({<>\n{<[{{(<((<{<[<()()>[{}<>]][([]())[{}{}]]><{[[]{}]{()()}}{([]<>)<()<>>}>}><{(<<<>{}>[[]]><({}[])({}()]>)}<{[\n(<{{<(([[({<(<{}><<>{}>)><{[(){}]}<{<>()}[[]<>]>>}{({<(){}}({}{})})})<<[[<(){}>{[]()}]<[{}{}]>]\n<{((<{[{<{[((((){})(<>{}))[<{}[]>[()]])(<[()()]{()<>}>)]{{({()}<{}[]))}[<(()[])><[()[]]({}<>)>\n(<(<({[{<{{{<[{}][[]<>]><{<><>}(<>[])>}}}>}<{<[({<[]{}>[{}()]}([()[]]{[]<>}))[[({}[])]{({}{})[{}[]]}]][<{{<>(\n[({<<[{{{<(<<<{}{}>{[]}>({()[]}({}()))>{<[{}()][{}{}]>[[<>{}](<><>)]})>(<<[<{}<>>]{<[]{}>([\n<(({{[(({(<{{([]<>)[{}<>]}}{<<[][]>{<>{}}>({<>()}{<>()})}>{[[[[]<>]](<<>{}><()<>>)]})({<([<\n<<[(<<([([({<[{}[]]<{}()>]{<[][]>[[][]]}}({<()()>{()[]}}({<>()}((){})))){{(<()[]>[[]])(<<>{}>)}{<{{}[\n{{(<<{([{[{(([{}{}]((){})))}{<[(()())({}())][{()<>}]>}][{<{({}())<[]()>}[[<><>]{<>()}]>}]}[((<\n<[[{(([<<<{<([[][]][()[]}){{[]<>}(()[])}>([(<>[]){{}[]}]{({})<<>{}>})}[[<{<>[]}<[]()>>][{{()[]}}[{{}()\n{{([{<((<{<[<<()[]>(<>())>{[<>()][[]<>]}]([({}[]][<>()]][(<>())<()<>>])>({<[[]<>]>[[()()][[][]]]}<[<[]()\n[<<({<{[[({[<((){})[{}]><<[][]>{()[]}>][<({}{})>[[{}()]{{}<>}]]}{{<<[]()>([]())>{{<>()}{<>[]}}\n[({[({{(<(<{<<<>[]><<>()>>({()[]}{()[]})]>){(([[()()](<>{})]{([][])<()()>})(({()[]}<{}()>)[\n{<(<{<{(({{[(<<>()>{<>[]})(({}())[[]()])]([({}())(<>{}}])}{{<{{}()}[[][]]>{{[]{}}<<>[]>}}}}{<[{<\n[((<{{{([<<<[({}[])[()<>]]<{<><>}<<>[]>>>>>[(<{[{}]<[]()>}{[<>]<[][]>}>{{(()[])}(([][]){<>[]}\n{<((<{(({{{<([[][]]{{}{}}){{[]{}}{[]<>}}>[{<{}()>([]<>)}(<[][]>{<>[]})]}<([[()[]]]{{()()}([][])})([{[][]}<{}\n[{([(([<{([(<{[]{}}[()[]]>(([])[<><>]))])[[{(({}())<[]<>>)<({}())[()[]]]}([<()()>[<><>]](<[]<>><<>()>))](\n{{[[[(((([[{[([]())[()>]}(<<()<>>({}<>)>[{<>[]}[()<>]])]<<[{[]()}{[]{}}]>({[{}{}]([]{})}[{(){}}{{}[]}])>]\n[({[<(<[{[{({<<>{}>{{}{}]}[(<>())[<>{}]])(((<>[])<{}[]>)[<()()>[{}{}]])}[[<<{}<>>{{}[]}>[(<><\n[{<((([{{{(<{[{}<>][[]<>]}]){[({{}<>})<<{}()>{{}{}}>]{<([]<>)<[]{}>>[<(){}>(<>[])]}}}(([{[<>]<[]()>}([<>{}][\n{(([<{[[<({[<<<>{})([]<>)>[{[]()}(<><>)]][<(()[])>{(<>{}){[][]}}]}<{[([]())<[]{}>]<{[]()}(()\n<{[{[<<{[(([{(<>{})<[][]>}<([]<>)(<><>)>](<[<>[]][[]<>]>[[[][]]({}[])])))]{[[{({<>}[()<>])[<[]<>>{[]()}]}(\n{(<(({{(<{<[<<<>{}>[<>[]]>([[]][[][]))]([(<>{})({})])><[[{{}[]}({}[])][{<><>}<{}>]](<([][]){[]}><{[][]\n{[[(({{({<(<(({}<>){{}}){([])({}{})}>)>}<<[([{<>[]}[[]<>]])<({[]()}[{}<>])<[{}{}][[][]]>>][{<\n({[{[{[<([{{[[()()](<>{})]((<>{})(()<>))}[({[]()}({}{}))[<<><>>{(){}}]]}<((([]){()<>}))>])><<<\n[{<({([<(([{[{[]<>}][(()<>)<<>[]>]}]<(<({}{})(()())>[([][])[(){}]]){<<()[]>>}>))<[{<[[[]{}]([]())][{{}{}}\n{[(((<<{[[(([<[]()>(<><>)])(<<<>{}>[<>{}]>{<<>><[]<>>}))[{(<<>()>[[]<>])(([]<>){<><>})}[((<>)[[][]])(([]{})[[\n{([<<{((({[[[(<>{})[()()]]]]<[([{}{}]<[]<>>){<<>[]><()[]>}]>}{<<{<()()>}>{{([]<>)[[]<>]}{<()[]>[[\n<<[(<(<[({<{<([]())(<>[])>[{{}<>}((){})]}>{({(<>())({}<>)})}}{<{<(<>[])><{[]{}}<{}()>>}[{(())(()[])}[({}())<[\n{{([{{<{{<[(<[[][]]{{}()}>)[<{[][]}<{}[]>}({{}()}{()()})]][{[[[]()]{()[]}]<{{}}([]())>}{(<\n[<<{{<<<[[[({[{}()]}{<{}[]>(()())}){({[]<>}([]{}))<({}{})(<>())>}]{({<[]<>>([]<>}}{{[][]}[[\n(({[[[{<(<{[[([][]){<>[]}]([[]<>])]<{[{}()]<{}[]>}[({}<>)<{}()>]>}[[(<<>[]>[<>()]){<()<>>{{}{}}\n{<{([[<<(<<{<[()<>][()()]>[[()[]]({})]}>>)>>]])<{({<<[[<([(){}]<[]()>)<<[][]>[<><>]>]]]>[({[{<()<>><\n{({([(([({{((<()()>([][])))}{{{<<>>}[[()<>](()())]}<{<<><>><{}[]>}>}})({<[{<{}{}>[<>()]}[{{}<>}[{}{}]]]({(\n{{(<{<[[(<(<[(<><>){[]()}]>)(([<{}{}>[[]<>]][<<><>>(<>{})])<<[[][]]><<[]()>{<>}>>)><<{<({}{})[<><>]>}<\n{[[[[{{(<<{<{{[]{}}<{}[]>}[<()[]>[<>[]]]>{([{}()])(<{}{}>{<>{}}]}}[<<{<>{}}<()()>>{[<>]}>{[(<>{})<()<>>]\n((<[{<[({<({[(()())(<>[])]<[<><>]{[][]}>}([([])[{}()]]<{<>()}{{}<>}>))><([<([]{}){[]}>[{[]}[[][]]]\n[<[<({[{{({<[(<><>)<[][]>](<<>{}>(<>()))>}(<<<{}{}>[{}<>]><<[]{}>[<><>]>>(((<>())<()>))))}}[{[(<[{()[]\n[{<[<(<<{[<([<{}[]><<>()>][[[]()]<()[]>])>[(<[(){}][{}{}]>{[<>{}]<{}()]})]]({[(<<>>)<[{}<>]<[]{}>>]<<<(){}><\n[<{<{<<<(((([<()>{<><>}][(()())[{}()]])[[{{}()}<()()>][{()}]])<(<<[][]>><<{}()>[{}[]]>)[([[][]][<>[]]\n({{<[{[{(<<[((<>[])<[]()>)[[{}{}]({}{})]]>([[(()<>)<<>{}>]{(()<>)[{}()]}]{(([]())([]()))[[[]<>][<>{}]]})>\n({<<[<{{[[([{<()<>>}])[<{<()[]>}[{(){}]<{}[]>]>[[[[][]]](<[]<>>{<><>})]]]<[{[([]{})<()()>]}(<({}<>){<\n<([<<{(<({{{<({})(<><>)>{{<>[]}<[][]>}}<([()[]]({}{}))>}})>{{({[[{{}<>}]{[(){}][(){}]}]([{{}{}}({}{})][[\n{[({<[<[([[<<({}{}){()[]}>{([]<>)}>{(({}<>)<[][]>)[{{}<>}(<>{})]}]])[({[(([]<>){<><>})(([]<>)<[\n<[[[{<<({<{([<()[]><[]()>])<[{{}()}<()[]>](([]<>){[]()})>}>{[[(<{}()){<>{}})[<[]()><()<>>]]{[{[][]\n{[(<{<{{{[(((({}[]){(){}})(<(){}>{{}<>})){([[]<>]{[]<>})[[<>{}]{<>()}]}){(([<><>][{}[]])([<>]\n[<({[[[[{<<{[{[]()}<[][]>](<{}<>>[{}{}])}{({{}()}((){}))([()<>]<<>()>)}>>[<([{()()}{[]()}]{[<\n{<{{([{<([<[{<(){}>(()[])}<<(){}>{{}{}}>][{[(){}](<>())}[{<><>}<[]{})]]>({({[]()}[[][]])<{<>()}<[]()\n[{{<[{<((([{{<[]{}>[[]{}]}{<<><>>[<>[]]}}](({<<>{}><[]>}<(<>)>)[((<>{}){<>[]})[{{}<>}<[]()>]]\n([<<{([<[<<([([]{})[{}()]]<(<><>)<()<>>>)><([{{}<>}[(){}]]([{}<>](<>{}))){<<[]<>>{()<>}>[<()<>>(<>)\n{{({({(<{({<{[()()]{[]{}}}[<{}[]>]>{[{<>[]}{{}()}](<<>{}>[{}<>])}}[{<[{}{}]<<>[])>([{}[]]{{}[]})\n<{((<([<[{([([<>{}]([]<>))]{{<{}[]>[[][]]}})([(<{}{}>{()<>})[[[]()][{}{}]]}[{{{}()}<<>()>}\n[{<[<<({({<[{<<>[]><<>{}>}<{<><>}<{}()>>][([[]()]{<>{}})]>{(<[{}[]]([]<>)>}<<[{}[]][{}<>]>{{{}()}{<>[]\n[{<<([([[{<((({}<>)[{}()])[{[]()}(<><>)])<[<()<>)(<>())]>>([((<>()))[[{}]([][])]]<([<>()]<()()>)>)}(([<{\n(<(([{<{(<([[[<>[]]{[][]}][((){})]])([((()())({}{}))(<<><>>)]<([[]<>]((){}>)({[]{}}{<>()})>)>)({{{{[\n{<<{{(<{[<{{<({}[])<{}[]>><([]())<{}<>>>}<([[]{}]<()<>>)>}>{<(([<>[]]([]()))<{{}{}}(<>[])>){[([]()\n{{(({<{[{[[[([{}<>](()))]{{{{}{}}{<>{}}}[[{}{}]([]<>)]}][([(<><>)[[][]]])<<(()())(()<>)>[([]()){()\n(<[{<<[<<[(<{{<>{}}{[]<>}}[{[][]}[()[]]]>[<(<>())((){})>{({}{}){[]<>}}])]]>((([(<[<>{}]{{}<>}>{(\n(<<{{<[{[(<<<[{}{}]([][])>[{()<>}[{}]]>{({()[]})(<()<>>(()))}>)}}][[<([({<{}>[<>[]]}){({()[]}(()[])){\n<(<([<<({[{(((<>[])<<><>>){{<>{}>}){{[()[]]<{}{}>}{({}{}){<>()}}}}[(<<<>{}>[{}{}]>(<()[]>[<><>])\n[{[<<{[<(([[({<>{}}(<>))<<()()>[<>{}]>][{{[]{}}}<<<>()>({})>]]><{([(<><>)]<<(){}>{{}{}}>){{{{}[]}<<><>>}[[()\n[[[[<{(({{(<<<{}><[]{}>>((()[])[{}()])><<{[]<>}{<>[]}>[(<>()){{}<>}]>)(({(<>())({}[])}){[<(){}><[]{}>][[\n<{[[<{<[<<[{([()()]{()()})[{[]()){{}{}}]}][{({<>{}})<[()()]{[]()}>}<[[(){}][{}[]]]{{<>[]}}>]><(([(()())\n{<<(<(([<<{[{<[][]>}{([]())[()<>]}]{[[<>]<[][]>](([]{})(()[]))})[<<[{}<>]{<>{}}>[([]<>)[{}[]]]><(\n[([({([([{<({<<>{}>[{}]})<[({}{})({}{})][{{}()}(<>{})]>><{{([]{})([][])}[[{}[]]<<><>>]}<((<><>)[()\n([[[[{{{{{{{<<(){}>{<><>}}{[{}[]]({}[])}}<({{}[]}[<>]){<<>{}>{()[]}}>}{{{(()[])}{{{}}}}{[([]())\n(<{(({<<<{(<[<[][]>]<<{}<>>{{}{}}>><[{[]<>][<>[]]][[<><>]<[]()>]>)[(<([]{}){[]{}}>({{}{}})\n<((({[(<<{({(([][])){[[]<>]}}<(({}{})({}{}))(<[]()>[()()])>)}>({(<[([]())[[]<>>]([[]{}]<[]<>>)><{{()[]}\n<{(<<({[(({{({<>[]}(<>{}))<<()[]>{<><>}>}<<<()[]>[(){}]>>})<{({(<>[]){<>[]}}[[<><>]])<[(())(<>[])\n[([<[{[[{({{({[]<>}{[]()})([{}{}](()<>))}{(<[]<>><<>[]>)}})}<<([<[<>()]<[][]>>([[][]]{[]{}})](<<()\n<<<(<({[{[{{(<{}>[{}{}])(([][])[(){}])}{([{}<>](<>))}}]}[<<{<((){}){[]{}}>({{}<>}{[][]})}<{{()()}<<><>>}>>{((\n<<<{{{((<[<<{<[]{}>}><[({}{})[[]<>]]>>[<([<>()](()))<(<><>)(()())>>[{<()<>>{()()}}]]]({(({[]{}}({}[])))<({{\n[<{[{[[{{{[{({<>[]}<[][]>)[{(){}}{{}()}]}<[[()()][{}()]](({}<>)[()()])>]<({<{}<>>({})}([()<>])){[{()<\n<{{{{([(([{{{<{}[]>(()[])}{({}[])({}[])}}}])<{({<({}<>]<<>{}>>[<()<>>({}())]}[<<[]()>[<>()]>(<()<>>{<>[]})])\n((([({[<[[([([<>[]]<[]<>>)(<()<>>)]{[{<>)[()()]][([]()){[]<>}]})]][{((<[<>[]]{<>()}>[<()<>>[{\n<[<{[[<[<<{{(<[]{}>){[()]({}{})}}(<[()[]]{[]()}>[<()[]>])}{{({[]<>>([]{})){{()<>}{<>[]}}}(<(<\n<[<<<[{<[<[[{(()<>)[()<>]}]({{()<>}({}())}[[{}()]])][{([<>{}]){({}[])([]{})}}]>[[[<(<>{})<(){}>>]}]]\n<<[[[{[<[(<<<{<><>}(()[])>{{()()}[()[]]}>>)[<{[<[]()>({}{})]{{{}[]}[[]]}}{{{[]<>}{()()}}}>[[[[(){}]({}<>)]{\n<[<((<<<{<[({[[][]]<{}{}>})({{<>{}}[()<>]}(({}{})[[]()]))]({{(<><>)<<>()>}{[[]{}]}}({(()())[{}()`;\nexport default data;\n","const data = `[({(<(())[]>[[{[]{<()<>>\n[(()[<>])]({[<{<<[]>>(\n{([(<{}[<>[]}>{[]{[(<()>\n(((({<>}<{<{<>}{[]{[]{}\n[[<[([]))<([[{}[[()]]]\n[{[{({}]{}}([{[{{{}}([]\n{<[[]]>}<{[{[{[]{()[[[]\n[<(<(<(<{}))><([]([]()\n<{([([[(<>()){}]>(<<{{\n<{([{{}}[<[[[<>{}]]]>[]]`;\nexport default data;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Day } from \"../../lib/Day\";\nimport { range } from \"../../lib/utils\";\n\nimport data from \"./input/day10\";\nimport testData from \"./input/day10test\";\n\ntype Data = string[];\n\nconst parse = (data: string) => {\n  return data.split(\"\\n\");\n};\n\nconst wrognScores: Record<string, number> = {\n  \")\": 3,\n  \"]\": 57,\n  \"}\": 1197,\n  \">\": 25137,\n};\n\nconst openers = [\"(\", \"[\", \"{\", \"<\"];\nconst closers = [\")\", \"]\", \"}\", \">\"];\n\nconst last = (array: any[]) => array[array.length - 1];\n\nconst countScore = (chunk: string) => {\n  const stack: string[] = [];\n  let wrognScore = 0;\n\n  chunk.split(\"\").every((char) => {\n    if (openers.indexOf(char) >= 0) {\n      stack.push(char);\n    } else if (char === closers[openers.indexOf(last(stack))]) {\n      stack.pop();\n    } else {\n      wrognScore += wrognScores[char];\n      return false;\n    }\n    return true;\n  });\n  return wrognScore;\n};\n\nconst part1 = (data: Data) => {\n  const scores = data.map(countScore);\n  return scores.reduce((acc, val) => acc + val, 0);\n};\n\nconst fold = (chunk: string) => chunk.replace(/\\(\\)|\\[\\]|\\{\\}|<>/, \"\");\n\nconst foldAll = (chunk: string) => {\n  let len = 0;\n  while (len !== chunk.length) {\n    len = chunk.length;\n    chunk = fold(chunk);\n  }\n  return chunk;\n};\n\nconst getCompletionString = (chunk: string) => {\n  return chunk\n    .split(\"\")\n    .map((char) => closers[openers.indexOf(char)])\n    .reverse()\n    .join(\"\");\n};\nconst missingScores: Record<string, number> = {\n  \")\": 1,\n  \"]\": 2,\n  \"}\": 3,\n  \">\": 4,\n};\nconst countMissing = (chunk: string) => {\n  return chunk\n    .split(\"\")\n    .reduce((acc, char) => acc * 5 + missingScores[char], 0);\n};\n\nconst part2 = (data: Data) => {\n  const incompleteChunks = data.filter((x) => countScore(x) === 0);\n  const missingChunks = incompleteChunks.map(foldAll).map(getCompletionString);\n  const scores = missingChunks.map(countMissing);\n  return scores.sort((a, b) => a - b)[Math.floor(scores.length / 2)];\n};\n\nconst day: Day<Data, number> = {\n  comment: `Note that this solution has two implementations --\n    a stack-based one for part 1, and an iterative folding algorithm for part 2.`,\n  parts: [\n    {\n      desc: \"What is the total syntax error score?\",\n      comment: `For part 1, I took a stack-based approach seeing as how\n      it was a good fit. Any invalid character causes an early-out, returning the\n       score of the expected character.\n      `,\n      // tests: [],\n      tests: [{ data: parse(testData), runner: part1, result: 26397 }],\n      // solutions: [],\n      solutions: [{ data: parse(data), runner: part1 }],\n    },\n    {\n      desc: \"What is the middle score?\",\n      comment: `For part 2, I realized that the approach I intially thought of\n      for part 1 was a good fit. By iteratively eliminating all valid pairs, we end up\n      with a neat list of incomplete chunks. Figure out what's needed to fix them,\n      calculate their score, and we're done.`,\n      // tests: [],\n      tests: [{ data: parse(testData), runner: part2, result: 288957 }],\n      // solutions: [],\n      solutions: [{ data: parse(data), runner: part2 }],\n    },\n  ],\n};\n\nexport default day;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Day } from \"../../lib/Day\";\r\nimport { colorString, deepCopy, initArray, range } from \"../../lib/utils\";\r\n\r\nimport data from \"./input/day11\";\r\nimport testData from \"./input/day11test\";\r\n\r\nconsole.clear();\r\n\r\ntype Map = number[][];\r\n\r\ntype Data = {\r\n  map: Map;\r\n  boom: number[][];\r\n};\r\n\r\nconst parse = (data: string): Data => {\r\n  const map = data\r\n    .split(\"\\n\")\r\n    .map((row) => row.split(\"\").map((char) => Number(char)));\r\n\r\n  const boom = initArray(map.length, map[0].length);\r\n\r\n  return {\r\n    map,\r\n    boom,\r\n  };\r\n};\r\n\r\nconst doStep = ({ map, boom }: Data) => {\r\n  map = deepCopy(map);\r\n  boom = deepCopy(boom);\r\n  return {\r\n    map: map.map((row, y) =>\r\n      row.map((cell, x) => {\r\n        if (boom[y][x] === 1) {\r\n          return cell;\r\n        }\r\n        if (cell === 9) {\r\n          boom[y][x] = 1;\r\n          return 0;\r\n        }\r\n        return cell + 1;\r\n      })\r\n    ),\r\n    boom,\r\n  };\r\n};\r\n\r\nconst visualize = ({ map, boom }: Data) => {\r\n  console.log(Array(map[0].length).fill(\"-\").join(\"\"));\r\n  console.log(\r\n    map\r\n      .map((row, y) =>\r\n        row\r\n          .map((char, x) => colorString(char, boom[y][x] === 1 ? 33 : 34))\r\n          .join(\"\")\r\n      )\r\n      .join(\"\\n\")\r\n  );\r\n};\r\n\r\nconst part1 = (data: Data) => {\r\n  data = deepCopy(data);\r\n  let totalFlashes = 0;\r\n  range(3).forEach((i) => {\r\n    visualize(data);\r\n    data.boom = initArray(data.map.length, data.map[0].length);\r\n    data = doStep(data);\r\n    totalFlashes += data.boom.reduce(\r\n      (acc, row) => acc + row.filter((x) => x === 1).length,\r\n      0\r\n    );\r\n  });\r\n  return totalFlashes;\r\n};\r\n\r\nconst part2 = (data: Data) => {\r\n  return 0;\r\n};\r\n\r\nconst day: Day<Data, number> = {\r\n  parts: [\r\n    {\r\n      // tests: [],\r\n      solutions: [],\r\n      tests: [{ data: parse(testData), runner: part1, result: 1656 }],\r\n      // solutions: [{ data: parse(data), runner: part1 }],\r\n    },\r\n    {\r\n      tests: [],\r\n      solutions: [],\r\n      // tests: [{ data: parse(testData), runner: part2, result: 288957 }],\r\n      // solutions: [{ data: parse(data), runner: part2 }],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default day;\r\n","import { Day } from \"../lib/Day\";\nimport year2021 from \"./2021/index\";\n\nconst years: Record<number, Record<number, Day<any, any>>> = { 2021: year2021 };\n\nexport default years;\n","import { Day } from \"../../lib/Day\";\r\nimport day01 from \"./day01\";\r\nimport day02 from \"./day02\";\r\nimport day03 from \"./day03\";\r\nimport day04 from \"./day04\";\r\nimport day05 from \"./day05\";\r\nimport day06 from \"./day06\";\r\nimport day07 from \"./day07\";\r\nimport day08 from \"./day08\";\r\nimport day09 from \"./day09\";\r\nimport day10 from \"./day10\";\r\nimport day11 from \"./day11\";\r\n\r\nconst days: Record<number, Day<any, any>> = {\r\n  1: day01,\r\n  2: day02,\r\n  3: day03,\r\n  4: day04,\r\n  5: day05,\r\n  6: day06,\r\n  7: day07,\r\n  8: day08,\r\n  9: day09,\r\n  10: day10,\r\n  11: day11,\r\n};\r\nexport default days;\r\n","const data = `5483143223\r\n2745854711\r\n5264556173\r\n6141336146\r\n6357385478\r\n4167524645\r\n2176841721\r\n6882881134\r\n4846848554\r\n5283751526`;\r\nexport default data;\r\n","import classNames from \"classnames\";\nimport { FunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport years from \"../data/index\";\n\nimport \"./Picker.scss\";\n\ntype Props = {\n  year: number;\n  day?: number;\n};\n\nconst Picker: FunctionComponent<Props> = ({ year, day }: Props) => {\n  const getClasses = (val: any, refVal: any) => {\n    return classNames({\n      \"ae-picker__listitem\": true,\n      \"ae-picker__listitem--is-active\": val === refVal,\n    });\n  };\n  return (\n    <div className=\"ae-picker\">\n      <ul className=\"ae-picker__list ae-picker__years\">\n        {Object.keys(years).map((y, index) => (\n          <Link key={`${index}`} to={`/${y}`}>\n            <li className={getClasses(Number(y), year)}>{y}</li>\n          </Link>\n        ))}\n      </ul>\n      <ul className=\"ae-picker__list ae-picker__days\">\n        {Object.keys(years[year]).map((d, index) => (\n          <Link key={`${index}`} to={`/${year}/${d}`}>\n            <li className={getClasses(Number(d), day)}>{d}</li>\n          </Link>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Picker;\n","import classnames from \"classnames\";\n\nimport {\n  FunctionComponent,\n  PropsWithChildren,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport years from \"../data/index\";\nimport { formatTime } from \"../lib/utils\";\n\nimport \"./Runner.scss\";\n\nconst execRunner = async (runner: Function, data: unknown) => {\n  return runner(data);\n};\n\nconst TestBox = ({\n  id,\n  result,\n  expected,\n}: {\n  id: string;\n  result: any;\n  expected: any;\n}) => {\n  const isCorrect = result === expected;\n\n  const classes = classnames({\n    \"ae-runner__box\": true,\n    \"ae-runner__box--is-test\": result !== undefined,\n    \"ae-runner__box--is-success\": isCorrect,\n    \"ae-runner__box--is-fail\": !isCorrect,\n  });\n\n  return (\n    <div className={classes}>\n      <span className=\"ae-runner__testid\">{id}</span>{\" \"}\n      <span className=\"ae-runner__result\">\n        {isCorrect ? (\n          <>✔ ({JSON.stringify(result)})</>\n        ) : (\n          <>\n            ❌{JSON.stringify(result)} (expected {expected})\n          </>\n        )}\n      </span>\n    </div>\n  );\n};\n\ntype BoxProps = {\n  id: string;\n  result: any;\n  runTime: number;\n  expected?: any;\n};\n\nconst Box: FunctionComponent<BoxProps> = ({\n  id,\n  result,\n  runTime,\n  expected,\n  children,\n}: PropsWithChildren<BoxProps>) => {\n  const classes = classnames({\n    \"ae-runner__box\": true,\n    \"ae-runner__box--is-test\": true,\n    \"ae-runner__box--is-success\": expected !== undefined && result === expected,\n    \"ae-runner__box--is-fail\": expected !== undefined && result !== expected,\n  });\n\n  return (\n    <div className={classes}>\n      <div className=\"ae-runner__boxresult\">\n        <span className=\"ae-runner__testid\">{id}</span>{\" \"}\n        <span className=\"ae-runner__result ae-runner__result--is-solution\">\n          {JSON.stringify(result)}{\" \"}\n          {expected && expected !== result && (\n            <span className=\"ae-runner__result\">({expected})</span>\n          )}\n        </span>\n        <span className=\"ae-runner__result ae-runner__timer\">\n          {formatTime(runTime)}\n        </span>\n      </div>\n      {children}\n    </div>\n  );\n};\n\ntype RunResult = {\n  type: \"test\" | \"solution\";\n  state: \"running\" | \"complete\";\n  result?: string;\n  expected?: string;\n  startTime: number;\n  endTime: number;\n};\n\ntype RunSet = Record<string, RunResult>;\n\ntype Props = {\n  year: number;\n  day: number;\n};\n\nconst Runner: FunctionComponent<Props> = ({ year, day }) => {\n  const [results, setResults] = useState<RunSet>({});\n\n  const run = useCallback(\n    (type: \"test\" | \"solution\", id: string, runner, data, expected?) => {\n      setResults((prev) => ({\n        ...prev,\n        ...{\n          [`${id}`]: {\n            type: type,\n            state: \"running\",\n            startTime: Date.now(),\n            endTime: Date.now(),\n          },\n        },\n      }));\n\n      execRunner(runner, data).then((result) => {\n        setResults((prev) => ({\n          ...prev,\n          ...{\n            [`${id}`]: {\n              ...prev[`${id}`],\n              endTime: Date.now(),\n              result,\n              expected,\n              state: \"complete\",\n            },\n          },\n        }));\n      });\n    },\n    []\n  );\n\n  useEffect(() => {\n    const yearData = years[year];\n    const dayData = yearData[day];\n\n    dayData.parts.forEach((part, partIndex) => {\n      part.tests.forEach((test, testIndex) => {\n        const key = `Y${year}-D${day}-P${partIndex}-T${testIndex}`;\n        run(\"test\", key, test.runner, test.data, test.result);\n      });\n      part.solutions.forEach((solution, solutionIndex) => {\n        const key = `Y${year}-D${day}-P${partIndex}-S${solutionIndex}`;\n        run(\"solution\", key, solution.runner, solution.data, solution.result);\n      });\n    });\n  }, [run, year, day]);\n\n  return (\n    <>\n      <div className=\"ae-runner\">\n        {years[year][day].desc && (\n          <div className=\"ae-runner__desc\">\n            <h4>Description</h4>\n            <p>{years[year][day].desc}</p>\n          </div>\n        )}\n        {years[year][day].comment && (\n          <div className=\"ae-runner__comment\">\n            <h4>Comment</h4>\n            <p>{years[year][day].comment}</p>\n          </div>\n        )}\n        {years[year][day].parts.map((part, i) => {\n          const resultSet = Object.entries(results);\n          return (\n            <div key={`Y${year}-D${day}-P${i}`} className=\"ae-runner__part\">\n              <h2>Part {i + 1}</h2>\n              <p>{part.desc}</p>\n              <h4>Tests</h4>\n              {resultSet\n                .filter(\n                  ([id, rs]) =>\n                    id.startsWith(`Y${year}-D${day}-P${i}-T`) &&\n                    rs.type === \"test\"\n                )\n                .map(([id, rs]) => {\n                  return rs.state === \"running\" ? (\n                    <div key={id}>Waiting for test {i}...</div>\n                  ) : (\n                    <TestBox\n                      key={id}\n                      id={id}\n                      result={rs.result}\n                      expected={rs.expected}\n                    />\n                  );\n                })}\n              <h4>Results</h4>\n              {resultSet\n                .filter(\n                  ([id, rs]) =>\n                    id.startsWith(`Y${year}-D${day}-P${i}`) &&\n                    rs.type === \"solution\"\n                )\n                .map(([id, rs]) => {\n                  return rs.state === \"running\" ? (\n                    <div key={id}>\n                      Waiting for solution {i}...{\" \"}\n                      {Date.now() - (rs.startTime || 0)}\n                    </div>\n                  ) : (\n                    <Box\n                      key={id}\n                      id={id}\n                      result={rs.result}\n                      expected={rs.expected}\n                      runTime={rs.endTime - rs.startTime}\n                    >\n                      {part.comment && (\n                        <div className=\"ae-runner__partcomment\">\n                          <h4>Comment</h4>\n                          <p>{part.comment}</p>\n                        </div>\n                      )}\n                    </Box>\n                  );\n                })}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default Runner;\n","import React from \"react\";\nimport { HashRouter, Route, Routes, useParams } from \"react-router-dom\";\nimport \"./App.scss\";\nimport Blurb from \"./ui/Blurb\";\nimport Debugger from \"./ui/Debugger\";\nimport Picker from \"./ui/Picker\";\nimport Runner from \"./ui/Runner\";\n\nconst AppMain = () => {\n  let params = useParams();\n  const year = Number(params.year) || 2021;\n  const day = Number(params.day) || 1;\n\n  return (\n    <>\n      <Picker year={year} day={day} />\n      <Runner year={year} day={day} />\n      <Debugger />\n    </>\n  );\n};\n\nfunction App() {\n  return (\n    <HashRouter>\n      <>\n        <Routes>\n          <Route path=\"/\" element={<AppMain />} />\n          <Route path=\":year\" element={<AppMain />}></Route>\n          <Route path=\":year/:day\" element={<AppMain />}></Route>\n        </Routes>\n        <Blurb />\n      </>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport \"./Global.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}